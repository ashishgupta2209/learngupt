how can i do that my bottom navabar will be constant on all pages and home selected when i am on index.html and lessons selected when i am on any page other than that index one and i can go on index page with selecting home and in lessons if i am not gone to any page yet it i will show nothing seclected and suppose when i went to any other page and back to home and again back to that lessons so the page will there which i visited last if i have not gone any other page from home.
understand it like that i am making this website for app

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <title>GLearn</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="manifest" href="manifest.json">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
</head>
<body>
    <!-- Top Navbar -->
    <nav class="navbar">
        <div class="logo-icon">
            <img src="img/logo.png" alt="App Logo">
        </div>
        <div class="title">
            <h2>Glearn <br /><span id="className"></span></h2>
        </div>
        <div class="settings">
            <i class="fa-solid fa-gear"></i>
        </div>
    </nav>

    <!-- Main Content -->
    <section class="content">
        <div class="box">
            <img src="img/choose-topic.png" alt="MCQs">
            <h3><a href="subject.html?board=<BOARD>&class=<CLASS>&type=mcqs">MCQs</a></h3>
        </div>
        <div class="box">
            <img src="img/idea.png" alt="Solutions">
            <h3><a href="subject.html?board=<BOARD>&class=<CLASS>&type=solutions">Solutions</a></h3>
        </div>
        <div class="box">
            <img src="img/quiz.png" alt="Quiz">
            <h3><a href="subject.html?board=<BOARD>&class=<CLASS>&type=quiz">Quiz</a></h3>
        </div>
        <a href="subject.html?board=<BOARD>&class=<CLASS>&type=notes">
            <div class="box">
                <img src="img/notes-icon.png" alt="Notes" style="margin-right: 12px;">
                <h3>Notes</h3>
            </div>
        </a>
        <div class="box">
            <img src="img/book.png" alt="Books">
            <h3><a href="subject.html?board=<BOARD>&class=<CLASS>&type=books">Books</a></h3>
        </div>
        <a href="subject.html?board=<BOARD>&class=<CLASS>&type=contact">
            <div class="box">
                <img src="img/contact-icon.png" alt="Contact">
                <h3>Contact</h3>
            </div>
        </a>
    </section>

    <!-- Bottom Navbar -->
    <div id="bottom-navbar"></div> <!-- Placeholder for the navbar -->

    <!-- Script for handling navbar and dynamic class name -->
    <script src="script.js"></script>
</body>
</html>

intex.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GLearn - Select Board and Class</title>
    <style>
        /* Basic reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Montserrat', sans-serif;
            display: flex;
            flex-direction: column;
            height: 100vh;
            background-color: #f4f4f4;
        }

        /* Main content area */
        .content {
            flex-grow: 1;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        /* Bottom navbar */
        .navbar {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: #333;
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 20px 10px;
            border-top-left-radius: 27px;
            border-top-right-radius: 27px;
            gap: 10px;
        }

        .navbar select,
        .navbar button {
            padding: 10px;
            font-size: 16px;
            width: 90%;
            max-width: 320px;
        }

        .navbar select {
            color: black;
            border-radius: 5px;
            border: none;
        }

        .navbar button {
            background-color: #0f94bd;
            color: white;
            border: none;
            border-radius: 15px;
            cursor: pointer;
        }

        .navbar button:hover {
            background-color: #046b8a;
        }

        #board, #class {
            border-radius: 18px !important;
        }

        #alertBox {
            display: none;
            color: red;
            margin-bottom: -2px;
        }
    </style>
</head>

<body>

    <!-- Main content -->
    <div class="content">
        <!-- Intentionally blank -->
    </div>

    <!-- Bottom navbar -->
    <div class="navbar">
        <p id="alertBox">Please Select Both!</p>

        <!-- Dropdown for choosing board -->
        <select name="board" id="board">
            <option value="" disabled selected>Select your board</option>
            <option value="cbse">CBSE</option>
            <option value="bseb">BSEB</option>
        </select>

        <!-- Dropdown for choosing class -->
        <select name="class" id="class">
            <option value="" disabled selected>Select your class</option>
            <option value="10">Class 10</option>
            <option value="12">Class 12</option>
        </select>

        <hr style="width: 90%; max-width: 320px; background-color: #ffffff; opacity: 0.7;">

        <!-- Let's Go button -->
        <button type="button" id="goBtn">Let's Go →</button>
    </div>

    <script>
        document.getElementById('goBtn').addEventListener('click', function () {
            const selBoard = document.getElementById('board').value;
            const selClass = document.getElementById('class').value;

            if (selBoard && selClass) {
                // Redirect to home.html with board and class in URL params
                window.location.href = `home.html?board=${selBoard}&class=${selClass}`;
            } else {
                document.getElementById("alertBox").style.display = 'block';
            }
        });
    </script>

</body>
</html>

home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <title>GLearn</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="manifest" href="manifest.json">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
</head>
<body>
    <!-- Top Navbar -->
    <nav class="navbar">
        <div class="logo-icon">
            <img src="img/logo.png" alt="App Logo">
        </div>
        <div class="title">
            <h2>Glearn <br /><span id="className"></span></h2>
        </div>
        <div class="settings">
            <i class="fa-solid fa-gear"></i>
        </div>
    </nav>

    <!-- Main Content -->
    <section class="content">
        <div class="box">
            <img src="img/choose-topic.png" alt="MCQs">
            <h3><a href="subject.html?board=<BOARD>&class=<CLASS>&type=mcqs">MCQs</a></h3>
        </div>
        <div class="box">
            <img src="img/idea.png" alt="Solutions">
            <h3><a href="subject.html?board=<BOARD>&class=<CLASS>&type=solutions">Solutions</a></h3>
        </div>
        <div class="box">
            <img src="img/quiz.png" alt="Quiz">
            <h3><a href="subject.html?board=<BOARD>&class=<CLASS>&type=quiz">Quiz</a></h3>
        </div>
        <a href="subject.html?board=<BOARD>&class=<CLASS>&type=notes">
            <div class="box">
                <img src="img/notes-icon.png" alt="Notes" style="margin-right: 12px;">
                <h3>Notes</h3>
            </div>
        </a>
        <div class="box">
            <img src="img/book.png" alt="Books">
            <h3><a href="subject.html?board=<BOARD>&class=<CLASS>&type=books">Books</a></h3>
        </div>
        <a href="contact.html">
            <div class="box">
                <img src="img/contact-icon.png" alt="Contact">
                <h3>Contact</h3>
            </div>
        </a>
    </section>

    <!-- Bottom Navbar -->
    <div id="bottom-navbar"></div> <!-- Placeholder for the navbar -->

    <!-- Script for handling navbar and dynamic class name -->
    <script src="script.js"></script>
</body>
</html>















subject.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Subjects</title>
    <link rel="stylesheet" href="styles.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<body>

    <!-- Header with back button and 'Subjects' title -->
    <nav class="navbar">
        <div class="back-button" onclick="window.location.href='home.html?board=' + encodeURIComponent(board) + '&class=' + encodeURIComponent(userClass);">
            <i class="fa-solid fa-chevron-left"></i>
        </div>
        <div class="title">
            <h2>Subjects</h2>
        </div>
    </nav>

    <!-- Main Content: Subjects List -->
    <section class="content">
        <div id="subjectContainer" class="subjects-grid"></div>
    </section>

    <!-- Bottom Navbar -->
    <div id="bottom-navbar"></div> <!-- Placeholder for the navbar -->

    <!-- Script for handling navbar and dynamic class name -->
    <script src="script.js"></script>

    <script>
        // Get board, class, and type from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const board = urlParams.get('board');
        const userClass = urlParams.get('class');
        const type = urlParams.get('type');

        // Set up the back button functionality
        document.querySelector('.back-button').onclick = function() {
            window.location.href = `home.html?board=${board}&class=${userClass}`;
        };

        // Fetch the subjects from the CSV file
        fetch(`subjects_${board}_${userClass}.csv`)
            .then(response => response.text())
            .then(csvData => {
                const rows = csvData.split('\n');
                const subjectContainer = document.getElementById('subjectContainer');

                rows.forEach(row => {
                    const [subject, img] = row.split(',');
                    if (subject && img) {
                        const subjectBox = document.createElement('div');
                        subjectBox.classList.add('box');
                        subjectBox.innerHTML = `
                            <img src="${img.trim()}" alt="${subject.trim()}" style="width: 100px; height: 100px;">
                            <h3>${subject.trim()}</h3>
                        `;
                        subjectBox.onclick = function() {
                            window.location.href = `chapter.html?board=${board}&class=${userClass}&subject=${subject.trim()}&type=${type}`;
                        };
                        subjectContainer.appendChild(subjectBox);
                    }
                });
            })
            .catch(error => console.error('Error loading subjects:', error));
    </script>

</body>
</html>













index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap" rel="stylesheet">
    <title>GLearn - Select Board and Class</title>
    <style>
        /* Basic reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Montserrat', sans-serif;
        }

        body {
            font-family: 'Montserrat', sans-serif;
            display: flex;
            flex-direction: column;
            height: 100vh;
            background-color: #f4f4f4;
        }

        /* Main content area */
        .content {
            flex-grow: 1;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        /* Bottom navbar */
        .navbar {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: #333;
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 20px 10px;
            border-top-left-radius: 27px;
            border-top-right-radius: 27px;
            gap: 10px;
            padding-bottom: 40px;
        }

        .navbar .dropdown {
            position: relative;
            width: 90%;
            max-width: 320px;
        }

        .navbar .dropdown-button {
            padding: 10px;
            font-size: 16px;
            background-color: #fff;
            color: black;
            border-radius: 30px;
            border: none;
            cursor: pointer;
            text-align: left;
            width: 100%;
            position: relative;
        }

        .navbar .dropdown-button:focus {
            background-color: #ececec;
        }

        .navbar .dropdown-menu {
            display: none;
            position: absolute;
            bottom: 100%; /* Position above the button */
            left: 0;
            width: 100%;
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 10;
        }

        .navbar .dropdown-menu div {
            padding: 10px;
            cursor: pointer;
            color: black;
        }

        .navbar .dropdown-menu div:hover {
            background-color: #f4f4f4;
        }

        .navbar .dropdown-menu.show {
            display: block;
        }

        .navbar button {
            padding: 10px;
            font-size: 16px;
            background-color: #43d156;
            color: white;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            width: 90%;
            max-width: 320px;
        }

        .navbar button:hover {
            background-color: #ececec;
        }

        #goBtn {
            font-size: 1.3rem;
            font-weight: 700;
        }

        #goBtn:hover,
        #goBtn:active {
            background-color: #439c4b;
        }

        #alertBox {
            display: none;
            color: red;
            margin-bottom: -2px;
        }
    </style>
</head>

<body>

    <!-- Main content -->
    <div class="content">
        <!-- Intentionally blank -->
    </div>

    <!-- Bottom navbar -->
    <div class="navbar">
        <p id="alertBox">Please Select Both!</p>

        <!-- Dropdown for choosing board -->
        <div class="dropdown">
            <button class="dropdown-button" id="boardButton">Select your board</button>
            <div class="dropdown-menu" id="boardMenu">
                <div data-value="">Select your board</div>
                <div data-value="cbse">CBSE</div>
                <div data-value="bseb">BSEB</div>
            </div>
        </div>

        <!-- Dropdown for choosing class -->
        <div class="dropdown">
            <button class="dropdown-button" id="classButton">Select your class</button>
            <div class="dropdown-menu" id="classMenu">
                <div data-value="">Select your class</div>
                <div data-value="8">Class 8</div>
                <div data-value="9">Class 9</div>
                <div data-value="10">Class 10</div>
            </div>
        </div>

        <hr style="width: 90%; max-width: 320px; background-color: #ffffff; opacity: 0.7;">

        <!-- Let's Go button -->
        <button type="button" id="goBtn">Let's Go</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const urlParams = new URLSearchParams(window.location.search);
            const fromSettings = urlParams.get('from'); // Check if coming from settings

            // Get board and class from localStorage
            const storedBoard = localStorage.getItem('board');
            const storedClass = localStorage.getItem('class');

            if (storedBoard && storedClass && !fromSettings) {
                // If board and class are already set and not coming from settings, redirect to home.html
                window.location.href = `home.html?board=${storedBoard}&class=${storedClass}`;
            }

            // Pre-select board and class if available
            if (storedBoard) {
                document.getElementById('boardButton').textContent = getBoardText(storedBoard);
                document.getElementById('boardButton').dataset.value = storedBoard;
            }
            if (storedClass) {
                document.getElementById('classButton').textContent = getClassText(storedClass);
                document.getElementById('classButton').dataset.value = storedClass;
            }

            // Dropdown button click event
            document.querySelectorAll('.dropdown-button').forEach(button => {
                button.addEventListener('click', function (event) {
                    event.stopPropagation();  // Prevents closing the dropdown when clicking inside it
                    closeAllDropdowns();  // Close other dropdowns first
                    const menuId = this.id.replace('Button', 'Menu');
                    document.getElementById(menuId).classList.toggle('show');
                });
            });

            // Dropdown menu item click event
            document.querySelectorAll('.dropdown-menu div').forEach(item => {
                item.addEventListener('click', function () {
                    const buttonId = this.parentNode.id.replace('Menu', 'Button');
                    const button = document.getElementById(buttonId);
                    button.textContent = this.textContent;
                    button.dataset.value = this.dataset.value;
                    this.parentNode.classList.remove('show');
                });
            });

            // Close dropdowns when clicking outside
            document.addEventListener('click', function () {
                closeAllDropdowns();
            });

            // Handle form submission to store the selected board and class
            document.getElementById('goBtn').addEventListener('click', function () {
                const selBoard = document.getElementById('boardButton').dataset.value;
                const selClass = document.getElementById('classButton').dataset.value;

                if (selBoard && selClass) {
                    // Store board and class in localStorage
                    localStorage.setItem('board', selBoard);
                    localStorage.setItem('class', selClass);

                    // Redirect to home.html with board and class in URL params
                    window.location.href = `home.html?board=${selBoard}&class=${selClass}`;
                } else {
                    document.getElementById("alertBox").style.display = 'block';
                }
            });

            // Function to close all open dropdowns
            function closeAllDropdowns() {
                document.querySelectorAll('.dropdown-menu').forEach(menu => {
                    menu.classList.remove('show');
                });
            }

            function getBoardText(value) {
                switch(value) {
                    case 'cbse': return 'CBSE';
                    case 'bseb': return 'BSEB';
                    default: return 'Select your board';
                }
            }

            function getClassText(value) {
                switch(value) {
                    case '8': return 'Class 8';
                    case '9': return 'Class 9';
                    case '10': return 'Class 10';
                    default: return 'Select your class';
                }
            }
        });
    </script>

</body>
</html>

\settinghs

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        .back-button {
            cursor: pointer;
            margin-right: auto;
        }

        .title {
            font-size: 24px;
        }

        .content {
            display: flex;
            flex-direction: column;
            align-items: center;
            flex-grow: 1;
            padding: 20px;
        }

        .settings-option {
            background-color: #0f94bd;
            color: white;
            border: none;
            border-radius: 10px;
            padding: 10px 20px;
            cursor: pointer;
            margin: 10px;
            text-align: center;
            width: 80%;
            max-width: 320px;
        }

        .settings-option:hover {
            background-color: #046b8a;
        }
    </style>
</head>

<body>
    <!-- Top Navbar -->
    <nav class="navbar">
        <div class="back-button" id="backBtn">
            <i class="fa-solid fa-chevron-left"></i>
        </div>
        <div class="title">
            <h2>Settings</h2>
        </div>
    </nav>

    <!-- Main Content -->
    <section class="content">
        <div class="current-settings">
            <h3>Current Board and Class</h3>
            <p id="current-board-class"></p>
        </div>

        <div class="settings-options">
            <button id="changeBoardClassBtn" class="settings-option">Change Board & Class</button>
        </div>
    </section>

    <!-- Script for handling settings -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const currentBoardClass = document.getElementById('current-board-class');
            const changeBoardClassBtn = document.getElementById('changeBoardClassBtn');
            const backBtn = document.getElementById('backBtn');

            // Display current board and class
            const board = localStorage.getItem('selectedBoard');
            const userClass = localStorage.getItem('selectedClass');
            currentBoardClass.textContent = `Board: ${board || 'Not set'}, Class: ${userClass || 'No class selected'}`;

            // Change board & class button action
            changeBoardClassBtn.addEventListener('click', function () {
                window.location.href = 'index.html?from=settings';
            });

            // Back button redirects to home.html with the selected board and class
            backBtn.addEventListener('click', function () {
                const board = localStorage.getItem('selectedBoard') || 'Not set';
                const userClass = localStorage.getItem('selectedClass') || 'No class selected';
                window.location.href = `home.html?board=${board}&class=${userClass}`;
            });
        });
    </script>
</body>

</html>










<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Subjects</title>
    <link rel="stylesheet" href="styles.css"> <!-- Using the same stylesheet as home.html -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        .title h2 {
            font-size: 1.8rem;
        }

        /* Centered heading for the content area */
        .content-heading {
            text-align: center;
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 20px;
            margin-top: 10px;
        }
    </style>
</head>
<body>

    <!-- Header with back button and 'Subjects' title -->
    <nav class="navbar">
        <div class="back-button" onclick="window.location.href='home.html?board=' + encodeURIComponent(board) + '&class=' + encodeURIComponent(userClass) + '&type=' + encodeURIComponent(type);">
            <i class="fa-solid fa-chevron-left"></i>
        </div>
        <div class="title">
            <h2>Subjects - <span id="typeTitle"></span></h2> <!-- Display the type here -->
        </div>
    </nav>

    <!-- Main Content: Subjects List, using the same structure as home.html -->
    <section class="content" id="subjectContainer">
        <!-- Centered heading displaying MCQs, Solutions, etc. -->
        <h2 id="contentHeading" class="content-heading"></h2>

        <!-- Subjects will be populated dynamically here -->
    </section>

    <!-- Bottom Navbar -->
    <div id="bottom-navbar"></div> <!-- Placeholder for the navbar -->

    <!-- Script for handling navbar and dynamic class name -->
    <script src="script.js"></script>

    <script>
        // Get board, class, and type from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const board = urlParams.get('board');
        const userClass = urlParams.get('class');
        const type = urlParams.get('type');

        // Function to properly format the type
        function formatType(type) {
            if (!type) return '';
            if (type.toLowerCase() === 'mcqs') {
                return 'MCQs'; // Special case for 'mcqs'
            } else {
                return type.charAt(0).toUpperCase() + type.slice(1).toLowerCase(); // Capitalize first letter for other types
            }
        }

        // Set up the back button functionality
        document.querySelector('.back-button').onclick = function() {
            window.location.href = `home.html?board=${board}&class=${userClass}&type=${type}`;
        };

        // Display the formatted type in the title
        const formattedType = formatType(type);
        document.getElementById('typeTitle').textContent = formattedType;

        // Display the same type as a centered heading in the content area
        document.getElementById('contentHeading').textContent = formattedType;

        // Store the type in localStorage
        localStorage.setItem('selectedType', type);

        // Fetch the subjects from the CSV file
        fetch(`subjects_${board}_${userClass}.csv`)
            .then(response => response.text())
            .then(csvData => {
                const rows = csvData.split('\n');
                const subjectContainer = document.getElementById('subjectContainer');

                rows.forEach(row => {
                    const [subject, img] = row.split(',');
                    if (subject && img) {
                        const subjectBox = document.createElement('a'); // Use 'a' for consistency with home.html
                        subjectBox.href = `chapter.html?board=${board}&class=${userClass}&subject=${subject.trim()}&type=${type}`;
                        subjectBox.innerHTML = `
                            <div class="box"> <!-- Reuse the 'box' class from home.html -->
                                <img src="${img.trim()}" alt="${subject.trim()}" style="width: 100px; height







index ripple
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="carousel.css">
    <title>GLearn - Select Board and Class</title>
    <script>
        function lockOrientation() {
            if (window.screen.orientation && window.screen.orientation.lock) {
                window.screen.orientation.lock('portrait')
                    .catch(function (error) {
                        console.log("Orientation lock failed: ", error);
                    });
            }
        }

        lockOrientation();
    </script>

    <style>
        /* Basic reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Nunito', sans-serif;
        }

        body {
            display: flex;
            flex-direction: column;
            height: 100vh;
            background-color: #f4f4f4;
        }

        /* Main content area */
        .content {
            flex-grow: 1;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        /* Bottom navbar */
        .navbar {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: #333;
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 20px 1px;
            border-top-left-radius: 24px;
            border-top-right-radius: 24px;
            gap: 10px;
            padding-top: 27px;
            padding-bottom: 30px;
        }

        .navbar .dropdown {
            position: relative;
            width: 90%;
            max-width: 420px;
        }

        .navbar .dropdown-button {
            padding: 10px;
            font-size: 1.2rem;
            background-color: #fff;
            color: rgb(44, 44, 44);
            border-radius: 37px;
            border: none;
            cursor: pointer;
            text-align: center;
            width: 100%;
            position: relative;
            font-weight: 660;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden; /* Required for ripple */
        }

        .navbar .dropdown-button i,
        .navbar .dropdown-button img {
            margin-right: 10px;
        }

        .navbar .dropdown-button:focus {
            background-color: #ececec;
        }

        .navbar .dropdown-menu {
            display: none;
            position: absolute;
            bottom: 100%;
            left: 0;
            width: 100%;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 10;
        }

        .navbar .dropdown-menu div {
            padding: 10px;
            cursor: pointer;
            color: black;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .navbar .dropdown-menu div img,
        .navbar .dropdown-menu div i {
            margin-right: 8px;
        }

        .navbar .dropdown-menu.show {
            display: block;
        }

        .navbar button {
            padding: 8px;
            font-size: 16px;
            background-color: #43d156;
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            width: 95%;
            max-width: 420px;
            overflow: hidden; /* Required for ripple */
        }

        #goBtn {
            font-size: 1.6rem;
            font-weight: 900;
        }

        #alertBox {
            display: none;
            color: rgb(247, 91, 91);
            margin-bottom: -2px;
            font-weight: 600;
        }

        #carousel-placeholder {
            margin-bottom: 200px;
        }

        /* High-quality ripple effect */
        .ripple {
            position: absolute;
            background: rgba(255, 255, 255, 0.5); /* Adjust color for visibility */
            border-radius: 50%;
            transform: scale(0);
            animation: ripple-animation 0.6s linear;
        }

        @keyframes ripple-animation {
            to {
                transform: scale(4);
                opacity: 0;
            }
        }

        /* Ensure clickable elements have relative positioning */
        .clickable {
            position: relative;
            overflow: hidden; /* Ensure ripple effect stays within boundaries */
        }
    </style>
</head>

<body>
    <!-- Main content -->
    <div id="carousel-placeholder"></div>
    <!-- Bottom navbar -->
    <div class="navbar">
        <p id="alertBox">Please Select Both!</p>

        <!-- Dropdown for choosing board -->
        <div class="dropdown">
            <button class="dropdown-button ripple-target clickable" id="boardButton">
                <i class="fa-solid fa-school"></i> <!-- Icon for board -->
                <span>Select your board</span>
            </button>
            <div class="dropdown-menu" id="boardMenu">
                <div data-value="">
                    <i class="fa-solid fa-school"></i> <!-- Icon for board -->
                    <span>Select your board</span>
                </div>
                <div data-value="ncert">
                    <img src="img/ncert.png" alt="NCERT" width="20"> <span>NCERT</span>
                </div>
                <div data-value="bihar_board">
                    <img src="img/bihar board.png" alt="Bihar Board" width="20"> <span>Bihar Board</span>
                </div>
            </div>
        </div>

        <!-- Dropdown for choosing class -->
        <div class="dropdown">
            <button class="dropdown-button ripple-target clickable" id="classButton">
                <i class="fa-solid fa-graduation-cap"></i> <!-- Icon for class -->
                <span>Select your class</span>
            </button>
            <div class="dropdown-menu" id="classMenu">
                <div data-value="">
                    <i class="fa-solid fa-graduation-cap"></i> <!-- Icon for class -->
                    <span>Select your class</span>
                </div>
                <div data-value="9">
                    <span>Class 9</span>
                </div>
                <div data-value="10">
                    <span>Class 10</span>
                </div>
            </div>
        </div>

        <hr style="width: 90%; max-width: 420px; background-color: #ffffff; opacity: 0.7;">

        <!-- Let's Go button -->
        <button type="button" id="goBtn" class="ripple-target clickable">Let's Go</button>
    </div>
    <script>
        
    </script>
    <!-- JavaScript code for ripple effect and dropdown functionality -->
    <script>
        // Function to create ripple effect
        function createRipple(event) {
            const element = event.currentTarget;

            // Create span for ripple effect
            const ripple = document.createElement('span');
            ripple.classList.add('ripple');

            // Get the position of the click
            const rect = element.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;

            // Set ripple position and size
            ripple.style.width = ripple.style.height = Math.max(element.offsetWidth, element.offsetHeight) + 'px';
            ripple.style.left = x + 'px';
            ripple.style.top = y + 'px';

            // Add ripple to element
            element.appendChild(ripple);

            // Remove ripple after animation
            ripple.addEventListener('animationend', () => {
                ripple.remove();
            });
        }

        // Attach ripple effect to all clickable elements
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.ripple-target').forEach(element => {
                element.addEventListener('click', createRipple);
            });

            // Dropdown functionality
            document.querySelectorAll('.dropdown-button').forEach(button => {
                button.addEventListener('click', function (event) {
                    event.stopPropagation();
                    closeAllDropdowns();
                    const menu = this.nextElementSibling;
                    menu.classList.toggle('show');
                });
            });

            document.querySelectorAll('#boardMenu div').forEach(item => {
                item.addEventListener('click', function () {
                    const selectedValue = this.getAttribute('data-value');
                    const button = document.getElementById('boardButton');
                    button.dataset.value = selectedValue;
                    button.innerHTML = `<i class="fa-solid fa-school"></i> ${this.innerHTML}`;
                    closeAllDropdowns();
                });
            });

            document.querySelectorAll('#classMenu div').forEach(item => {
                item.addEventListener('click', function () {
                    const selectedValue = this.getAttribute('data-value');
                    const button = document.getElementById('classButton');
                    button.dataset.value = selectedValue;
                    button.innerHTML = `<i class="fa-solid fa-graduation-cap"></i> ${this.innerHTML}`;
                    closeAllDropdowns();
                });
            });

            document.addEventListener('click', closeAllDropdowns);

            function closeAllDropdowns() {
                document.querySelectorAll('.dropdown-menu').forEach(menu => {
                    menu.classList.remove('show');
                });
            }
        });
    </script>
</body>

</html>



home.html

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <title>GLearn</title>
    <link rel="manifest" href="manifest.json">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
</head>

<body>
    <!-- Top Navbar -->
    <nav class="navbar">
        <div class="logo-icon">
            <img src="img/logo.png" alt="App Logo">
        </div>
        <div class="title">
            <h2>Glearn <br /><span id="className"></span></h2>
        </div>
        <div class="settings icon-wrapper" onclick="window.location.href='settings.html';">
            <i class="fa-solid fa-gear"></i>
        </div>
    </nav>

    <!-- Main Content -->
    <section class="content">
        <a id="mcqsLink" href="#">
            <div class="box">
                <img src="img/mcqs.png" alt="MCQs">
                <h3>MCQs</h3>
            </div>
        </a>
        <a id="solutionsLink" href="#">
            <div class="box">
                <img src="img/solutions.png" alt="Solutions">
                <h3>Solutions</h3>
            </div>
        </a>
        <a id="quizLink" href="#">
            <div class="box">
                <img src="img/quiz.png" alt="Quiz">
                <h3>Quiz</h3>
            </div>
        </a>
        <a id="notesLink" href="#">
            <div class="box">
                <img src="img/notes.png" alt="Notes" style="margin-right: 12px;">
                <h3>Notes</h3>
            </div>
        </a>
        <a id="booksLink" href="#">
            <div class="box">
                <img src="img/books.png" alt="Books">
                <h3>Books</h3>
            </div>
        </a>
        <a href="contact.html">
            <div class="box">
                <img src="img/contact-icon.png" alt="Contact">
                <h3>Contact</h3>
            </div>
        </a>
    </section>

    <!-- Bottom Navbar -->
    <div id="bottom-navbar"></div> <!-- Placeholder for the navbar -->

    <!-- Script for handling navbar and dynamic class name -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const urlParams = new URLSearchParams(window.location.search);
            const board = urlParams.get('board') || localStorage.getItem('selectedBoard');
            const userClass = urlParams.get('class') || localStorage.getItem('selectedClass') || 'No class selected';

            if (board && userClass) {
                localStorage.setItem('selectedBoard', board);
                localStorage.setItem('selectedClass', userClass);

                // Update the class name in the title
                document.getElementById('className').innerText = `Class ${userClass}`;

                // Update links with the board and class parameters
                document.getElementById('mcqsLink').href = `subject.html?board=${board}&class=${userClass}&type=mcqs`;
                document.getElementById('solutionsLink').href = `subject.html?board=${board}&class=${userClass}&type=solutions`;
                document.getElementById('quizLink').href = `subject.html?board=${board}&class=${userClass}&type=quiz`;
                document.getElementById('notesLink').href = `subject.html?board=${board}&class=${userClass}&type=notes`;
                document.getElementById('booksLink').href = `subject.html?board=${board}&class=${userClass}&type=books`;
            } else {
                // Redirect to index.html if no board and class are set
                window.location.href = 'index.html';
            }
        });

    </script>

    <!-- Script for handling the bottom navbar -->
    <script src="script.js"></script>
</body>

</html>



cah[pter.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chapters</title>
    <link rel="stylesheet" href="styles.css"> <!-- Using the same stylesheet as subject.html -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        body {
            padding-top: 110px !important;
        }
        .title h2 {
            font-size: 1.8rem;
        }
        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
        }
        .spancontainer {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        #subjectTitle {
            font-size: 1.6rem;
            font-weight: 600;
        }
        .content {
            padding-top: 10px !important;
        }
        .chapter-container {
            margin-bottom: 20px;
        }
        .section-container {
            margin-top: 10px;
            padding-left: 20px;
        }
        .box {
            margin-bottom: 10px;
        }
    </style>
</head>

<body>

    <!-- Header with back button and 'Chapters' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper"
            onclick="window.location.href='subject.html?board=' + encodeURIComponent(board) + '&class=' + encodeURIComponent(userClass) + '&type=' + encodeURIComponent(type);">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Chapters</h2>
        </div>
    </nav>
    <div class="spancontainer">
        <span id="subjectTitle"></span>
    </div>
    <!-- Main Content: Chapters List -->
    <section class="content" id="chapterContainer">
        <!-- Chapters and sections will be populated dynamically here -->
    </section>

    <!-- Bottom Navbar -->
    <div id="bottom-navbar"></div> <!-- Placeholder for the navbar -->

    <!-- Script for handling navbar and dynamic chapter listing -->
    <script src="script.js"></script>

    <script>
        // Get board, class, subject, and type from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const board = urlParams.get('board');
        const userClass = urlParams.get('class');
        const subject = urlParams.get('subject');
        const type = urlParams.get('type');

        // Set up the back button functionality
        document.querySelector('.back-button').onclick = function () {
            window.location.href = `subject.html?board=${board}&class=${userClass}&type=${type}`;
        };

        // Display the subject name in the title
        document.getElementById('subjectTitle').textContent = subject;

        // Fetch the chapters from the CSV file
        fetch(`Chapters/chapters_${board}_${userClass}_${subject}.csv`)
            .then(response => response.text())
            .then(csvData => {
                const rows = csvData.split('\n');
                const chapterContainer = document.getElementById('chapterContainer');
                let currentSection = null;

                rows.forEach(row => {
                    const [id, name] = row.split(',', 2);
                    if (name) {
                        if (id.includes('.')) {
                            // This is a chapter
                            const chapterBox = document.createElement('div');
                            chapterBox.className = 'box';
                            chapterBox.innerHTML = `<h3>${name.trim()}</h3>`;
                            chapterContainer.appendChild(chapterBox);
                            currentSection = null; // Reset section
                        } else if (currentSection) {
                            // This is a section under the current chapter
                            const sectionBox = document.createElement('div');
                            sectionBox.className = 'box';
                            sectionBox.innerHTML = `<h4>${name.trim()}</h4>`;
                            currentSection.appendChild(sectionBox);
                        } else {
                            // This is a section but there's no chapter
                            console.warn('Orphaned section:', name);
                        }
                    } else if (id) {
                        // Start a new section container
                        currentSection = document.createElement('div');
                        currentSection.className = 'section-container';
                        const sectionTitle = document.createElement('h3');
                        sectionTitle.textContent = id.trim();
                        currentSection.appendChild(sectionTitle);
                        chapterContainer.appendChild(currentSection);
                    }
                });
            })
            .catch(error => console.error('Error loading chapters:', error));
    </script>

</body>

</html>


vhap2

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chapters</title>
    <link rel="stylesheet" href="styles.css"> <!-- General styles for navbar and body -->
    <link rel="stylesheet" href="chapters.css"> <!-- Separate styles for chapters content -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>

<body>

    <!-- Header with back button and 'Chapters' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper"
            onclick="window.location.href='subject.html?board=' + encodeURIComponent(board) + '&class=' + encodeURIComponent(userClass) + '&type=' + encodeURIComponent(type);">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Chapters</h2>
        </div>
    </nav>

    <div class="spancontainer">
        <span id="subjectTitle"></span>
    </div>

    <!-- Main Content: Chapters List -->
    <section class="chapter-container" id="chapterContainer">
        <!-- Chapters and sections will be populated dynamically here -->
    </section>

    <!-- Bottom Navbar -->
    <div id="bottom-navbar"></div> <!-- Placeholder for the navbar -->

    <!-- Script for handling navbar and dynamic chapter listing -->
    <script src="script.js"></script>

    <script>
        // Get board, class, subject, and type from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const board = urlParams.get('board');
        const userClass = urlParams.get('class');
        const subject = urlParams.get('subject');
        const type = urlParams.get('type');

        // Set up the back button functionality
        document.querySelector('.back-button').onclick = function () {
            window.location.href = `subject.html?board=${board}&class=${userClass}&type=${type}`;
        };

        // Display the subject name in the title
        document.getElementById('subjectTitle').textContent = subject;

        // Fetch the chapters from the CSV file
        fetch(`Chapters/chapters_${board}_${userClass}_${subject}.csv`)
            .then(response => response.text())
            .then(csvData => {
                const rows = csvData.split('\n');
                const chapterContainer = document.getElementById('chapterContainer');
                let currentSection = null;

                rows.forEach(row => {
                    const [id, name] = row.split(',', 2);
                    if (name) {
                        if (id.includes('.')) {
                            // This is a chapter
                            const chapterBox = document.createElement('div');
                            chapterBox.className = 'chapter-box';
                            chapterBox.innerHTML = `<h3>${name.trim()}</h3>`;
                            chapterContainer.appendChild(chapterBox);
                            currentSection = null; // Reset section
                        } else if (currentSection) {
                            // This is a section under the current chapter
                            const sectionBox = document.createElement('div');
                            sectionBox.className = 'section-box';
                            sectionBox.innerHTML = `<h4>${name.trim()}</h4>`;
                            currentSection.appendChild(sectionBox);
                        } else {
                            // This is a section but there's no chapter
                            console.warn('Orphaned section:', name);
                        }
                    } else if (id) {
                        // Start a new section container
                        currentSection = document.createElement('div');
                        currentSection.className = 'section-container';
                        const sectionTitle = document.createElement('h3');
                        sectionTitle.textContent = id.trim();
                        currentSection.appendChild(sectionTitle);
                        chapterContainer.appendChild(currentSection);
                    }
                });
            })
            .catch(error => console.error('Error loading chapters:', error));
    </script>

</body>

</html>


vpap 2 css
.chapter-container {
    display: flex;
    flex-direction: column;
    padding: 20px;
    width: 100%;
    box-sizing: border-box;
}

.chapter-box {
    background-color: #313131;
    border: 1px solid #ccc;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    width: 100%;
}

.section-container {
    background-color: #fff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 10px;
    margin-bottom: 10px;
}

.section-box {
    padding-left: 10px;
    margin-top: 5px;
}

h3, h4 {
    margin: 0;
    padding: 0;
}

h3 {
    font-size: 1.6rem;
    font-weight: 600;
}

h4 {
    font-size: 1.2rem;
    font-weight: 500;
}


chapter.html

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chapters</title>
    <link rel="stylesheet" href="styles.css"> <!-- General styles for navbar and body -->
    <link rel="stylesheet" href="chapters.css"> <!-- Separate styles for chapters content -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        body {
            padding-top: 110px !important;
        }
        .title h2 {
            font-size: 1.8rem;
        }
        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
        }
        .spancontainer {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        #subjectTitle {
            font-size: 1.6rem;
            font-weight: 600;
        }
        .content {
            padding-top: 10px !important;
        }
        .chapter-container {
            margin-bottom: 20px;
        }
        .section-container {
            margin-top: 10px;
            padding-left: 20px;
        }
        .box {
            margin-bottom: 10px;
        }
    </style>
</head>

<body>

    <!-- Header with back button and 'Chapters' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper"
            onclick="window.location.href='subject.html?board=' + encodeURIComponent(board) + '&class=' + encodeURIComponent(userClass) + '&type=' + encodeURIComponent(type);">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Chapters</h2>
        </div>
    </nav>

    <div class="spancontainer">
        <span id="subjectTitle"></span>
    </div>

    <!-- Main Content: Chapters List -->
    <section class="chapter-container" id="chapterContainer">
        <!-- Chapters and sections will be populated dynamically here -->
    </section>

    <!-- Bottom Navbar -->
    <div id="bottom-navbar"></div> <!-- Placeholder for the navbar -->

    <!-- Script for handling navbar and dynamic chapter listing -->
    <script src="script.js"></script>

    <script>
        // Get board, class, subject, and type from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const board = urlParams.get('board');
        const userClass = urlParams.get('class');
        const subject = urlParams.get('subject');
        const type = urlParams.get('type');

        // Set up the back button functionality
        document.querySelector('.back-button').onclick = function () {
            window.location.href = `subject.html?board=${board}&class=${userClass}&type=${type}`;
        };

        // Display the subject name in the title
        document.getElementById('subjectTitle').textContent = subject;

        // Fetch the chapters from the CSV file
        fetch(`Chapters/chapters_${board}_${userClass}_${subject}.csv`)
            .then(response => response.text())
            .then(csvData => {
                const rows = csvData.split('\n');
                const chapterContainer = document.getElementById('chapterContainer');
                let currentSection = null;

                rows.forEach(row => {
                    const [sectionOrId, name] = row.split(',', 2);
                    
                    if (sectionOrId.toLowerCase() === 'section' && name) {
                        // This is a section header (e.g., "Varnika", "Godhuli")
                        const sectionBox = document.createElement('div');
                        sectionBox.className = 'section-container';
                        sectionBox.innerHTML = `<h3>${name.trim()}</h3>`;
                        chapterContainer.appendChild(sectionBox);
                        currentSection = sectionBox; // Set this as the current section container
                    } else if (name) {
                        // This is a chapter under the current section
                        const chapterBox = document.createElement('div');
                        chapterBox.className = 'chapter-box';
                        chapterBox.innerHTML = `<h4>${sectionOrId.trim()} ${name.trim()}</h4>`;
                        if (currentSection) {
                            currentSection.appendChild(chapterBox); // Add to the current section
                        } else {
                            console.warn('Chapter found without a section:', name);
                        }
                    }
                });
            })
            .catch(error => console.error('Error loading chapters:', error));
    </script>

</body>

</html>



chapter.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chapters</title>
    <link rel="stylesheet" href="styles.css"> <!-- General styles for navbar and body -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        body {
            padding-top: 110px !important;
        }
        .title h2 {
            font-size: 1.8rem;
        }
        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
        }
        .spancontainer {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        #subjectTitle {
            font-size: 1.6rem;
            font-weight: 600;
        }
        .content {
            padding-top: 10px !important;
        }
        .chapter-container {
            margin-bottom: 20px;
        }
        .section-container {
            margin-top: 10px;
            padding-left: 20px;
        }
        .box {
            margin-bottom: 10px;
        }
        
        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }
    </style>
</head>

<body>

    <!-- Header with back button and 'Chapters' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper"
            onclick="window.location.href='subject.html?board=' + encodeURIComponent(board) + '&class=' + encodeURIComponent(userClass) + '&type=' + encodeURIComponent(type);">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Chapters</h2>
        </div>
    </nav>

    <div class="spancontainer">
        <span id="subjectTitle"></span>
    </div>

    <!-- Main Content: Chapters List -->
    <section class="chapter-container" id="chapterContainer">
        <!-- Chapters and sections will be populated dynamically here -->
    </section>

    <!-- Bottom Navbar -->
    <div id="bottom-navbar"></div> <!-- Placeholder for the navbar -->

    <!-- Script for handling navbar and dynamic chapter listing -->
    <script src="script.js"></script>

    <script>
    // Get board, class, subject, and type from URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const board = urlParams.get('board');
    const userClass = urlParams.get('class');
    let subject = urlParams.get('subject');
    const type = urlParams.get('type');

    // Handle spaces in subject name (replace with underscores for file matching)
    subject = subject.replace(/\s+/g, '_');

    // Set up the back button functionality
    document.querySelector('.back-button').onclick = function () {
        window.location.href = `subject.html?board=${board}&class=${userClass}&type=${type}`;
    };

    // Display the subject name in the title
    document.getElementById('subjectTitle').textContent = subject.replace(/_/g, ' '); // Show subject name with spaces

    // Fetch the chapters from the CSV file
    const csvFilePath = `Chapters/chapters_${board}_${userClass}_${subject}.csv`;
    console.log(`Fetching chapters from: ${csvFilePath}`); // Debug: log the file path

    fetch(csvFilePath)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
        })
        .then(csvData => {
            const rows = csvData.split('\n');
            const chapterContainer = document.getElementById('chapterContainer');
            let currentSection = null;

            rows.forEach(row => {
                const [sectionOrId, name] = row.split(',', 2);

                if (sectionOrId.toLowerCase() === 'section' && name) {
                    // This is a section header (e.g., "Varnika", "Godhuli")
                    const sectionBox = document.createElement('div');
                    sectionBox.className = 'section-container';
                    sectionBox.innerHTML = `<h3>${name.trim()}</h3>`;
                    chapterContainer.appendChild(sectionBox);
                    currentSection = sectionBox; // Set this as the current section container
                } else if (name) {
                    // This is a chapter under the current section
                    const chapterBox = document.createElement('div');
                    chapterBox.className = 'chapter-box';
                    chapterBox.innerHTML = `<h4>${sectionOrId.trim()} ${name.trim()}</h4>`;
                    if (currentSection) {
                        currentSection.appendChild(chapterBox); // Add to the current section
                    } else {
                        chapterContainer.appendChild(chapterBox); // Add directly if no section
                    }
                }
            });
        })
        .catch(error => console.error('Error loading chapters:', error));

    // Track the current chapter page URL
    localStorage.setItem('lastPage', window.location.href);
    // Store subject in localStorage
    localStorage.setItem('selectedSubject', subject.replace(/_/g, ' ')); // Store subject with spaces
    </script>

</body>

</html>


cahp[ter.css
.chapter-container {
    display: flex;
    flex-direction: column;
    padding: 20px;
    width: 100%;
    box-sizing: border-box;
}

.section-container {
    background-color: #353535;
    border: 2px solid #353535;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
}

.chapter-box {
    display: flex;
    justify-content: space-between; /* Ensure content and icon are on opposite sides */
    align-items: center; /* Vertically center the icon and text */
    background-color: #353535;
    border: 1px solid #474747;
    border-radius: 8px;
    padding: 10px;
    margin-top: 10px;
}

h3 {
    font-size: 1.2rem;
    font-weight: 600;
    color: #ffffff;
}

h4 {
    font-size: 1rem;
    font-weight: 500;
    margin: 0;
    padding: 5px 0;
    color: #ffffff;
}

/* Style for the chevron icon */
.chapter-box i {
    color: #ffffff;
    font-size: 1.2rem;
    text-align: right;
}
]


chapter.html

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chapters</title>
    <link rel="stylesheet" href="styles.css"> <!-- General styles for navbar and body -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        body {
            padding-top: 110px !important;
        }

        .title h2 {
            font-size: 1.8rem;
        }

        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
        }

        .spancontainer {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #subjectTitle {
            font-size: 1.6rem;
            font-weight: 600;
        }

        .content {
            padding-top: 10px !important;
        }

        .chapter-container {
            margin-bottom: 20px;
        }

        .section-container {
            margin-top: 10px;
            padding-left: 20px;
        }

        .box {
            margin-bottom: 10px;
        }

        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }


    </style>
</head>

<body>

    <!-- Header with back button and 'Chapters' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper"
            onclick="window.location.href='subject.html?board=' + encodeURIComponent(board) + '&class=' + encodeURIComponent(userClass) + '&type=' + encodeURIComponent(type);">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Chapters</h2>
        </div>
    </nav>

    <div class="spancontainer">
        <span id="subjectTitle"></span>
    </div>

    <!-- Main Content: Chapters List -->
    <section class="chapter-container" id="chapterContainer">
        <!-- Chapters and sections will be populated dynamically here -->
    </section>

    <!-- Bottom Navbar -->
    <div id="bottom-navbar"></div> <!-- Placeholder for the navbar -->

    <!-- Script for handling navbar and dynamic chapter listing -->
    <script src="script.js"></script>

    <script>
    // Get board, class, subject, and type from URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const board = urlParams.get('board');
    const userClass = urlParams.get('class');
    let subject = urlParams.get('subject');
    const type = urlParams.get('type');

    // Handle spaces in subject name (replace with underscores for file matching)
    subject = subject.replace(/\s+/g, '_');

    // Set up the back button functionality
    document.querySelector('.back-button').onclick = function () {
        window.location.href = `subject.html?board=${board}&class=${userClass}&type=${type}`;
    };

    // Display the subject name in the title
    document.getElementById('subjectTitle').textContent = subject.replace(/_/g, ' '); // Show subject name with spaces

    // Fetch the chapters from the CSV file
    const csvFilePath = `Chapters/chapters_${board}_${userClass}_${subject}.csv`;
    console.log(`Fetching chapters from: ${csvFilePath}`); // Debug: log the file path

    fetch(csvFilePath)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
        })
        .then(csvData => {
            const rows = csvData.split('\n');
            const chapterContainer = document.getElementById('chapterContainer');
            let currentSection = null;

            rows.forEach(row => {
                const [sectionOrId, name] = row.split(',', 2);

                if (sectionOrId.toLowerCase() === 'section' && name) {
                    // This is a section header (e.g., "Varnika", "Godhuli")
                    const sectionBox = document.createElement('div');
                    sectionBox.className = 'section-container';
                    sectionBox.innerHTML = `<h3>${name.trim()}</h3>`;
                    chapterContainer.appendChild(sectionBox);
                    currentSection = sectionBox; // Set this as the current section container
                } else if (name) {
                    // This is a chapter under the current section
                    const chapterBox = document.createElement('div');
                    chapterBox.className = 'chapter-box';
                    chapterBox.innerHTML = `<h4>${sectionOrId.trim()} ${name.trim()}</h4><i class="fa-solid fa-chevron-right"></i>`; // Add the icon here
                    if (currentSection) {
                        currentSection.appendChild(chapterBox); // Add to the current section
                    } else {
                        chapterContainer.appendChild(chapterBox); // Add directly if no section
                    }
                }
            });
        })
        .catch(error => console.error('Error loading chapters:', error));

    // Track the current chapter page URL
    localStorage.setItem('lastPage', window.location.href);
    // Store subject in localStorage
    localStorage.setItem('selectedSubject', subject.replace(/_/g, ' ')); // Store subject with spaces
    </script>

</body>

</html>


chaapter.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chapters</title>
    <link rel="stylesheet" href="styles.css"> <!-- General styles for navbar and body -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        body {
            padding-top: 110px !important;
        }

        .title h2 {
            font-size: 1.8rem;
        }

        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
        }

        .spancontainer {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #subjectTitle {
            font-size: 1.6rem;
            font-weight: 600;
        }

        .content {
            padding-top: 10px !important;
        }

        .chapter-container {
            margin-bottom: 20px;
            padding-top: 6px !important;
        }

        .section-container {
            margin-top: 10px;
            padding-left: 20px;
        }

        .box {
            margin-bottom: 10px;
        }

        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }

        .chapter-box {
            cursor: pointer; /* Make chapter boxes clickable */
        }

    </style>
</head>

<body>

    <!-- Header with back button and 'Chapters' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper"
            onclick="window.location.href='subject.html?board=' + encodeURIComponent(board) + '&class=' + encodeURIComponent(userClass) + '&type=' + encodeURIComponent(type);">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Chapters</h2>
        </div>
    </nav>

    <div class="spancontainer">
        <span id="subjectTitle"></span>
    </div>

    <!-- Main Content: Chapters List -->
    <section class="chapter-container" id="chapterContainer">
        <!-- Chapters and sections will be populated dynamically here -->
    </section>

    <!-- Bottom Navbar -->
    <div id="bottom-navbar"></div> <!-- Placeholder for the navbar -->

    <!-- Script for handling navbar and dynamic chapter listing -->
    <script src="script.js"></script>

    <script>
    // Get board, class, subject, and type from URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const board = urlParams.get('board');
    const userClass = urlParams.get('class');
    let subject = urlParams.get('subject');
    const type = urlParams.get('type');

    // Handle spaces in subject name (replace with underscores for file matching)
    subject = subject.replace(/\s+/g, '_');

    // Set up the back button functionality
    document.querySelector('.back-button').onclick = function () {
        window.location.href = `subject.html?board=${board}&class=${userClass}&type=${type}`;
    };

    // Display the subject name in the title
    document.getElementById('subjectTitle').textContent = subject.replace(/_/g, ' '); // Show subject name with spaces

    // Fetch the chapters from the CSV file
    const csvFilePath = `Chapters/chapters_${board}_${userClass}_${subject}.csv`;
    console.log(`Fetching chapters from: ${csvFilePath}`); // Debug: log the file path

    fetch(csvFilePath)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
        })
        .then(csvData => {
            const rows = csvData.split('\n');
            const chapterContainer = document.getElementById('chapterContainer');
            let currentSection = null;

            rows.forEach(row => {
                const [sectionOrId, name] = row.split(',', 2);

                if (sectionOrId.toLowerCase() === 'section' && name) {
                    // This is a section header (e.g., "Varnika", "Godhuli")
                    const sectionBox = document.createElement('div');
                    sectionBox.className = 'section-container';
                    sectionBox.innerHTML = `<h3>${name.trim()}</h3>`;
                    chapterContainer.appendChild(sectionBox);
                    currentSection = sectionBox; // Set this as the current section container
                } else if (name) {
                    // This is a chapter under the current section
                    const chapterBox = document.createElement('div');
                    chapterBox.className = 'chapter-box';
                    chapterBox.innerHTML = `<h4>${sectionOrId.trim()} ${name.trim()}</h4><i class="fa-solid fa-chevron-right"></i>`; // Add the icon here
                    chapterBox.dataset.page = `${type}.html`; // Store the type in a data attribute
                    if (currentSection) {
                        currentSection.appendChild(chapterBox); // Add to the current section
                    } else {
                        chapterContainer.appendChild(chapterBox); // Add directly if no section
                    }
                }
            });

            // Add click event listeners to chapter boxes
            document.querySelectorAll('.chapter-box').forEach(box => {
                box.addEventListener('click', function () {
                    const pageType = this.dataset.page;
                    window.location.href = `${pageType}?board=${board}&class=${userClass}&subject=${subject}`;
                });
            });
        })
        .catch(error => console.error('Error loading chapters:', error));

    // Track the current chapter page URL
    localStorage.setItem('lastPage', window.location.href);
    // Store subject in localStorage
    localStorage.setItem('selectedSubject', subject.replace(/_/g, ' ')); // Store subject with spaces
    </script>

</body>

</html>


mcqs.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCQs</title>
    <style>
        /* Debugging styles for visibility */
        body {
            padding-top: 110px !important;
            background-color: black !important; /* Force contrasting background */
            color: white !important; /* Force text to white */
        }

        .mcq-container {
            margin-top: 20px;
            background-color: lightgray !important; /* Force container background */
            color: black !important; /* Force text inside container to black */
            padding: 20px;
            min-height: 300px; /* Force minimum height */
            display: block !important; /* Ensure the container is displayed */
            visibility: visible !important; /* Ensure the container is visible */
        }

        .question {
            font-size: 1.6rem;
            font-weight: bold;
        }

        .options {
            margin-left: 20px;
        }

        .option {
            margin: 5px 0;
            color: darkblue;
        }

        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }

        /* Debugging outline for visibility */
        * {
            outline: 1px solid red; /* Force outline around every element */
        }
    </style>
</head>

<body>
    <!-- Header with back button and 'MCQs' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper"
            onclick="window.history.back();">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>MCQs</h2>
        </div>
    </nav>

    <!-- Main Content: MCQs List -->
    <section class="mcq-container" id="mcqContainer">
        <!-- MCQs will be populated dynamically here -->
    </section>

    <script>
        // Get the board, class, subject, and chapter from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const board = urlParams.get('board');
        const userClass = urlParams.get('class');
        const subject = urlParams.get('subject');
        const chapter = urlParams.get('chapter');

        // CSV file path based on the parameters
        const csvFilePath = `MCQs/mcqs_${board}_${userClass}_${subject}_${chapter}.csv`;

        // Fetch and display the MCQs
        fetch(csvFilePath)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.text();
            })
            .then(csvData => {
                const rows = csvData.split('\n');
                const mcqContainer = document.getElementById('mcqContainer');

                rows.forEach((row, index) => {
                    const [question, optionA, optionB, optionC, optionD, correctAnswer] = row.split(',');

                    if (question && optionA && optionB && optionC && optionD) {
                        // Create MCQ element
                        const mcqElement = document.createElement('div');
                        mcqElement.classList.add('mcq');

                        mcqElement.innerHTML = `
                            <div class="question">${index + 1}. ${question.trim()}</div>
                            <div class="options">
                                <div class="option">A. ${optionA.trim()}</div>
                                <div class="option">B. ${optionB.trim()}</div>
                                <div class="option">C. ${optionC.trim()}</div>
                                <div class="option">D. ${optionD.trim()}</div>
                            </div>
                        `;

                        mcqContainer.appendChild(mcqElement);
                    }
                });
            })
            .catch(error => console.error('Error loading MCQs:', error));
    </script>

</body>
</html>


mcqws

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>MCQs</title>
    <style>
        /* General Styles */
        body {
            padding-top: 110px;
            background-color: black;
            color: white;
            font-family: Arial, sans-serif;
        }

        /* Navbar Styles */
        .navbar {
            padding: 10px;
            background-color: #333;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 1.2rem;
        }

        .navbar h2 {
            margin: 0;
            font-size: 1.8rem;
        }

        .back-button {
            cursor: pointer;
            font-size: 1.2rem;
            color: white;
        }

        .back-button:hover {
            color: #ccc;
        }

        /* MCQ Container Styles */
        .mcq-container {
            margin: 20px;
            background-color: #f9f9f9;
            padding: 20px;
            border-radius: 5px;
        }

        .mcq-section {
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .question {
            font-size: 1.6rem;
            font-weight: bold;
        }

        .options {
            margin-left: 20px;
        }

        .option {
            margin: 5px 0;
            padding: 5px;
            cursor: pointer;
            border-radius: 5px;
        }

        .option:hover {
            background-color: #e0e0e0;
        }

        .option.correct {
            background-color: #d4edda;
        }

        .option.incorrect {
            background-color: #f8d7da;
        }

        .option.selected.correct {
            background-color: #c3e6cb;
        }

        .option.selected.incorrect {
            background-color: #f5c6cb;
        }
    </style>
</head>

<body>
    <!-- Header with back button and 'MCQs' title -->
    <nav class="navbar">
        <div class="back-button" onclick="goBack();">
            <i class="fa-solid fa-arrow-left"></i> Back
        </div>
        <div class="title">
            <h2>MCQs</h2>
        </div>
    </nav>

    <!-- Main Content: MCQs List -->
    <section class="mcq-container" id="mcqContainer">
        <!-- MCQs will be populated dynamically here -->
    </section>

    <script>
        // Function to get URL parameters
        function getUrlParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }

        // Get URL parameters
        const board = getUrlParam('board');
        const userClass = getUrlParam('class');
        const subject = getUrlParam('subject');
        const chapter = getUrlParam('chapter');
        const type = getUrlParam('type');
        const page = getUrlParam('page'); // Get the page parameter for back navigation

        // Function to format URL for CSV
        function formatCsvUrl(type, board, userClass, subject, chapter) {
            return `${type}/${type.toLowerCase()}_${board}_${userClass}_${subject}_${chapter}.csv`;
        }

        // Function to handle back button
        function goBack() {
            window.location.href = page || `chapter.html?board=${board}&class=${userClass}&subject=${subject}&type=${type}&page=${encodeURIComponent(window.location.href)}`;
        }

        // Load MCQs from CSV
        function loadMCQs() {
            const csvUrl = formatCsvUrl('mcqs', board, userClass, subject, chapter);
            fetch(csvUrl)
                .then(response => response.text())
                .then(csvData => {
                    const rows = csvData.split('\n');
                    const mcqContainer = document.getElementById('mcqContainer');
                    
                    rows.forEach((row, index) => {
                        const [question, optionA, optionB, optionC, optionD, correctOption] = row.split(',');

                        if (question && optionA && optionB && optionC && optionD) {
                            const mcqSection = document.createElement('div');
                            mcqSection.className = 'mcq-section';
                            mcqSection.innerHTML = `
                                <div class="question">Q${index + 1}. ${question.trim()}</div>
                                <div class="options">
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="a">${optionA.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="b">${optionB.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="c">${optionC.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="d">${optionD.trim()}</div>
                                </div>
                            `;
                            mcqContainer.appendChild(mcqSection);
                        }
                    });

                    // Add event listeners for MCQ options
                    document.querySelectorAll('.option').forEach(option => {
                        option.addEventListener('click', function() {
                            const parent = this.parentNode;
                            const correctOption = parent.querySelector(`.option[data-option="${this.dataset.correct}"]`);

                            parent.querySelectorAll('.option').forEach(opt => {
                                opt.classList.remove('selected', 'correct', 'incorrect');
                            });

                            this.classList.add('selected');
                            if (this.dataset.option === this.dataset.correct) {
                                this.classList.add('correct');
                            } else {
                                this.classList.add('incorrect');
                                correctOption.classList.add('correct');
                            }
                        });
                    });
                })
                .catch(error => console.error('Error loading MCQs:', error));
        }

        // Load MCQs when the page loads
        loadMCQs();
    </script>
</body>
</html>


mcq.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>MCQs</title>
    <style>
        /* General Styles */
        body {
        padding-top: 110px !important;
       }
        .title h2 {
            font-size: 1.8rem;
        }
        .navbar {
            padding-left:10px !important;
            padding-block: 22px !important;
        }
        .content {
            padding-top: 10px !important;
        }
        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }
        /* MCQ Container Styles */
        .mcq-container {
            padding: 16px;
            margin: 0px;
            background-color: #1a1a1a;
            border-radius: 8px;
        }

        .mcq-section {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #292929;
            border-radius: 8px;
            border: 1px solid #292929;
        }

        .question {
            font-size: 1.2rem;
            font-weight: 600;
            color: #fff;
        }

        .options {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
        }

        .option {
            margin: 5px 0;
            padding: 10px;
            background-color: #444;
            border-radius: 5px;
            cursor: pointer;
            color: #fff;
            transition: background-color 0.3s;
        }

        .option:hover {
            background-color: #555;
        }

        .option.correct {
            background-color: rgb(68, 184, 84);
        }

        .option.incorrect {
            background-color: #dc3545;
        }

        .option.selected.correct {
            background-color: #34ce48;
        }

        .option.selected.incorrect {
            background-color: #e04156;
        }
    </style>
</head>
<body>
    <!-- Header with back button and 'MCQs' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
        <h2>MCQs</h2>
    </div>
    </nav>

    <!-- Main Content: MCQs List -->
    <section class="mcq-container" id="mcqContainer">
        <!-- MCQs will be populated dynamically here -->
    </section>

    <script>
        // Function to get URL parameters
        function getUrlParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }

        // Get URL parameters
        const board = getUrlParam('board');
        const userClass = getUrlParam('class');
        const subject = getUrlParam('subject');
        const chapter = getUrlParam('chapter');
        const type = getUrlParam('type');
        const page = getUrlParam('page'); // Get the page parameter for back navigation

        // Function to format URL for CSV
        function formatCsvUrl(type, board, userClass, subject, chapter) {
            return `${type}/${type.toLowerCase()}_${board}_${userClass}_${subject}_${chapter}.csv`;
        }

        // Function to handle back button
        function goBack() {
            window.location.href = page || `chapter.html?board=${board}&class=${userClass}&subject=${subject}&type=${type}&page=${encodeURIComponent(window.location.href)}`;
        }

        // Load MCQs from CSV
        function loadMCQs() {
            const csvUrl = formatCsvUrl('mcqs', board, userClass, subject, chapter);
            fetch(csvUrl)
                .then(response => response.text())
                .then(csvData => {
                    const rows = csvData.split('\n');
                    const mcqContainer = document.getElementById('mcqContainer');
                    
                    rows.forEach((row, index) => {
                        const [question, optionA, optionB, optionC, optionD, correctOption] = row.split(',');

                        if (question && optionA && optionB && optionC && optionD) {
                            const mcqSection = document.createElement('div');
                            mcqSection.className = 'mcq-section';
                            mcqSection.innerHTML = `
                                <div class="question">Q${index + 1}. ${question.trim()}</div>
                                <div class="options">
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="a">${optionA.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="b">${optionB.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="c">${optionC.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="d">${optionD.trim()}</div>
                                </div>
                            `;
                            mcqContainer.appendChild(mcqSection);
                        }
                    });

                    // Add event listeners for MCQ options
                    document.querySelectorAll('.option').forEach(option => {
                        option.addEventListener('click', function() {
                            const parent = this.parentNode;
                            const correctOption = parent.querySelector(`.option[data-option="${this.dataset.correct}"]`);

                            parent.querySelectorAll('.option').forEach(opt => {
                                opt.classList.remove('selected', 'correct', 'incorrect');
                            });

                            this.classList.add('selected');
                            if (this.dataset.option === this.dataset.correct) {
                                this.classList.add('correct');
                            } else {
                                this.classList.add('incorrect');
                                correctOption.classList.add('correct');
                            }
                        });
                    });
                })
                .catch(error => console.error('Error loading MCQs:', error));
        }

        // Load MCQs when the page loads
        loadMCQs();
    </script>
    <script src="script.js"></script>
</body>
</html>






















<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>MCQs</title>
    <style>
        /* General Styles */
        body {
        padding-top: 110px !important;
       }
        .title h2 {
            font-size: 1.8rem;
        }
        .navbar {
            padding-left:10px !important;
            padding-block: 22px !important;
        }
        .content {
            padding-top: 10px !important;
        }
        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }
        /* MCQ Container Styles */
        .mcq-container {
            padding: 16px;
            margin: 0px;
            background-color: #1a1a1a;
            border-radius: 8px;
        }

        .mcq-section {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #292929;
            border-radius: 8px;
            border: 1px solid #292929;
        }

        .question {
            font-size: 1.2rem;
            font-weight: 600;
            color: #fff;
        }

        .options {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
        }

        .option {
            margin: 5px 0;
            padding: 10px;
            background-color: #444;
            border-radius: 5px;
            cursor: pointer;
            color: #fff;
            transition: background-color 0.3s;
        }

        .option:hover {
            background-color: #555;
        }

        .option.correct {
            background-color: rgb(68, 184, 84);
        }

        .option.incorrect {
            background-color: #dc3545;
        }

        .option.selected.correct {
            background-color: #34ce48;
        }

        .option.selected.incorrect {
            background-color: #e04156;
        }
    </style>
</head>
<body>
    <!-- Header with back button and 'MCQs' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
        <h2>MCQs</h2>
    </div>
    </nav>

    <!-- Main Content: MCQs List -->
    <section class="mcq-container" id="mcqContainer">
        <!-- MCQs will be populated dynamically here -->
    </section>

    <script>
        // Function to get URL parameters
        function getUrlParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }
    
        // Get URL parameters
        const board = getUrlParam('board');
        const userClass = getUrlParam('class');
        const subject = getUrlParam('subject');
        const chapter = getUrlParam('chapter');
        const type = getUrlParam('type');
        const page = getUrlParam('page'); // Get the page parameter for back navigation
    
        // Function to format URL for CSV
        function formatCsvUrl(type, board, userClass, subject, chapter) {
            return `${type}/${type.toLowerCase()}_${board}_${userClass}_${subject}_${chapter}.csv`;
        }
    
        // Function to handle back button
        function goBack() {
            window.location.href = page || `chapter.html?board=${board}&class=${userClass}&subject=${subject}&type=${type}&page=${encodeURIComponent(window.location.href)}`;
        }
    
        // Get solved questions from localStorage
        function getSolvedQuestions() {
            const key = `solved_mcqs_${board}_${userClass}_${subject}_${chapter}`;
            const solved = localStorage.getItem(key);
            console.log("Loaded solved questions:", solved); // Debug log
            return solved ? JSON.parse(solved) : {};
        }
    
        // Save solved question index to localStorage
        function saveSolvedQuestion(index, selectedOption) {
            const key = `solved_mcqs_${board}_${userClass}_${subject}_${chapter}`;
            const solvedQuestions = getSolvedQuestions();
            solvedQuestions[index] = selectedOption; // Save selected option for this question
            localStorage.setItem(key, JSON.stringify(solvedQuestions));
            console.log("Stored solved questions:", solvedQuestions); // Debug log
        }
    
        // Scroll to first unsolved question
        function scrollToFirstUnsolved() {
            const solvedQuestions = getSolvedQuestions();
            const mcqSections = document.querySelectorAll('.mcq-section');
            for (let i = 0; i < mcqSections.length; i++) {
                if (!solvedQuestions.hasOwnProperty(i)) { // Scroll to first unsolved
                    mcqSections[i].scrollIntoView({ behavior: 'smooth' });
                    console.log("Scrolling to first unsolved question:", i); // Debug log
                    break;
                }
            }
        }
    
        // Load MCQs from CSV
        function loadMCQs() {
            const csvUrl = formatCsvUrl('mcqs', board, userClass, subject, chapter);
            fetch(csvUrl)
                .then(response => response.text())
                .then(csvData => {
                    const rows = csvData.split('\n');
                    const mcqContainer = document.getElementById('mcqContainer');
                    const solvedQuestions = getSolvedQuestions(); // Get previously solved questions
                    
                    rows.forEach((row, index) => {
                        const [question, optionA, optionB, optionC, optionD, correctOption] = row.split(',');
    
                        if (question && optionA && optionB && optionC && optionD) {
                            const mcqSection = document.createElement('div');
                            mcqSection.className = 'mcq-section';
                            mcqSection.innerHTML = `
                                <div class="question">Q${index + 1}. ${question.trim()}</div>
                                <div class="options">
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="a">${optionA.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="b">${optionB.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="c">${optionC.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="d">${optionD.trim()}</div>
                                </div>
                            `;
                            mcqContainer.appendChild(mcqSection);
    
                            // Check if this question was already solved
                            if (solvedQuestions.hasOwnProperty(index)) {
                                const selectedOption = solvedQuestions[index];
                                const selectedOptionElement = mcqSection.querySelector(`.option[data-option="${selectedOption}"]`);
                                const correctOptionElement = mcqSection.querySelector(`.option[data-option="${correctOption.trim()}"]`);
    
                                if (selectedOptionElement) {
                                    selectedOptionElement.classList.add('selected');
                                    if (selectedOption === correctOption.trim()) {
                                        selectedOptionElement.classList.add('correct');
                                    } else {
                                        selectedOptionElement.classList.add('incorrect');
                                        correctOptionElement.classList.add('correct');
                                    }
                                }
                            }
                        }
                    });
    
                    // Add event listeners for MCQ options
                    document.querySelectorAll('.mcq-section').forEach((section, index) => {
                        section.querySelectorAll('.option').forEach(option => {
                            option.addEventListener('click', function() {
                                const parent = this.parentNode;
                                const correctOption = parent.querySelector(`.option[data-option="${this.dataset.correct}"]`);
    
                                parent.querySelectorAll('.option').forEach(opt => {
                                    opt.classList.remove('selected', 'correct', 'incorrect');
                                });
    
                                this.classList.add('selected');
                                if (this.dataset.option === this.dataset.correct) {
                                    this.classList.add('correct');
                                } else {
                                    this.classList.add('incorrect');
                                    correctOption.classList.add('correct');
                                }
    
                                // Save the solved question with the selected option
                                saveSolvedQuestion(index, this.dataset.option);
                            });
                        });
                    });
    
                    // Scroll to first unsolved question
                    scrollToFirstUnsolved();
                })
                .catch(error => console.error('Error loading MCQs:', error));
        }
    
        // Load MCQs when the page loads
        loadMCQs();
    </script>
    
    <script src="script.js"></script>
</body>
</html>


mcqs.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>MCQs</title>
    <style>
        /* General Styles */
        body {
        padding-top: 110px !important;
       }
        .title h2 {
            font-size: 1.8rem;
        }
        .navbar {
            padding-left:10px !important;
            padding-block: 22px !important;
        }
        .content {
            padding-top: 10px !important;
        }
        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }
        /* MCQ Container Styles */
        .mcq-container {
            padding: 16px;
            margin: 0px;
            background-color: #1a1a1a;
            border-radius: 8px;
        }

        .mcq-section {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #292929;
            border-radius: 8px;
            border: 1px solid #292929;
        }

        .question {
            font-size: 1.2rem;
            font-weight: 600;
            color: #fff;
        }

        .options {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
        }

        .option {
            margin: 5px 0;
            padding: 10px;
            background-color: #444;
            border-radius: 5px;
            cursor: pointer;
            color: #fff;
            transition: background-color 0.3s;
        }

        .option:hover {
            background-color: #555;
        }

        .option.correct {
            background-color: rgb(68, 184, 84);
        }

        .option.incorrect {
            background-color: #dc3545;
        }

        .option.selected.correct {
            background-color: #34ce48;
        }

        .option.selected.incorrect {
            background-color: #e04156;
        }
    </style>
</head>
<body>
    <!-- Header with back button and 'MCQs' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
        <h2>MCQs</h2>
    </div>
    </nav>

    <!-- Main Content: MCQs List -->
    <section class="mcq-container" id="mcqContainer">
        <!-- MCQs will be populated dynamically here -->
    </section>

    <script>
        // Function to get URL parameters
        function getUrlParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }
    
        // Get URL parameters
        const board = getUrlParam('board');
        const userClass = getUrlParam('class');
        const subject = getUrlParam('subject');
        const chapter = getUrlParam('chapter');
        const type = getUrlParam('type');
        const page = getUrlParam('page'); // Get the page parameter for back navigation
    
        // Function to format URL for CSV
        function formatCsvUrl(type, board, userClass, subject, chapter) {
            return `${type}/${type.toLowerCase()}_${board}_${userClass}_${subject}_${chapter}.csv`;
        }
    
        // Function to handle back button
        function goBack() {
            window.location.href = page || `chapter.html?board=${board}&class=${userClass}&subject=${subject}&type=${type}&page=${encodeURIComponent(window.location.href)}`;
        }
    
        // Get solved questions from localStorage
        function getSolvedQuestions() {
            const key = `solved_mcqs_${board}_${userClass}_${subject}_${chapter}`;
            const solved = localStorage.getItem(key);
            return solved ? JSON.parse(solved) : {};
        }
    
        // Save solved question index to localStorage
        function saveSolvedQuestion(index, selectedOption) {
            const key = `solved_mcqs_${board}_${userClass}_${subject}_${chapter}`;
            const solvedQuestions = getSolvedQuestions();
            solvedQuestions[index] = selectedOption; // Save selected option for this question
            localStorage.setItem(key, JSON.stringify(solvedQuestions));
        }
    
        // Easing function for deceleration (ease-out)
        function easeOutCubic(t) {
            return 1 - Math.pow(1 - t, 6);
        }
    
        // Function to slow scroll to element with easing
        function slowScrollTo(element) {
            const targetY = element.getBoundingClientRect().top + window.pageYOffset;
            const startY = window.pageYOffset;
            const distance = targetY - startY;
            const duration = 2300; // Slow scroll duration in milliseconds
            const startTime = performance.now();
    
            function step(timestamp) {
                const elapsed = timestamp - startTime;
                const progress = Math.min(elapsed / duration, 1);
                const easedProgress = easeOutCubic(progress); // Apply easing curve
                const amountToScroll = easedProgress * distance;
                window.scrollTo(0, startY + amountToScroll);
    
                if (progress < 1) {
                    window.requestAnimationFrame(step);
                }
            }
    
            window.requestAnimationFrame(step);
        }
    
        // Scroll to first unsolved question slowly
        function scrollToFirstUnsolved() {
            const solvedQuestions = getSolvedQuestions();
            const mcqSections = document.querySelectorAll('.mcq-section');
            let firstUnsolvedElement = null;
    
            for (let i = 0; i < mcqSections.length; i++) {
                if (!solvedQuestions.hasOwnProperty(i)) {
                    firstUnsolvedElement = mcqSections[i];
                    break;
                }
            }
    
            if (firstUnsolvedElement) {
                slowScrollTo(firstUnsolvedElement);
            }
        }
    
        // Load MCQs from CSV
        function loadMCQs() {
            const csvUrl = formatCsvUrl('mcqs', board, userClass, subject, chapter);
            fetch(csvUrl)
                .then(response => response.text())
                .then(csvData => {
                    const rows = csvData.split('\n');
                    const mcqContainer = document.getElementById('mcqContainer');
                    const solvedQuestions = getSolvedQuestions();
                    
                    rows.forEach((row, index) => {
                        const [question, optionA, optionB, optionC, optionD, correctOption] = row.split(',');
    
                        if (question && optionA && optionB && optionC && optionD) {
                            const mcqSection = document.createElement('div');
                            mcqSection.className = 'mcq-section';
                            mcqSection.innerHTML = `
                                <div class="question">Q${index + 1}. ${question.trim()}</div>
                                <div class="options">
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="a">${optionA.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="b">${optionB.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="c">${optionC.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="d">${optionD.trim()}</div>
                                </div>
                            `;
                            mcqContainer.appendChild(mcqSection);
    
                            // Check if this question was already solved
                            if (solvedQuestions.hasOwnProperty(index)) {
                                const selectedOption = solvedQuestions[index];
                                const selectedOptionElement = mcqSection.querySelector(`.option[data-option="${selectedOption}"]`);
                                const correctOptionElement = mcqSection.querySelector(`.option[data-option="${correctOption.trim()}"]`);
    
                                if (selectedOptionElement) {
                                    selectedOptionElement.classList.add('selected');
                                    if (selectedOption === correctOption.trim()) {
                                        selectedOptionElement.classList.add('correct');
                                    } else {
                                        selectedOptionElement.classList.add('incorrect');
                                        correctOptionElement.classList.add('correct');
                                    }
                                }
                            }
                        }
                    });
    
                    // Add event listeners for MCQ options
                    document.querySelectorAll('.mcq-section').forEach((section, index) => {
                        section.querySelectorAll('.option').forEach(option => {
                            option.addEventListener('click', function() {
                                const parent = this.parentNode;
                                const correctOption = parent.querySelector(`.option[data-option="${this.dataset.correct}"]`);
    
                                parent.querySelectorAll('.option').forEach(opt => {
                                    opt.classList.remove('selected', 'correct', 'incorrect');
                                });
    
                                this.classList.add('selected');
                                if (this.dataset.option === this.dataset.correct) {
                                    this.classList.add('correct');
                                } else {
                                    this.classList.add('incorrect');
                                    correctOption.classList.add('correct');
                                }
    
                                // Save the solved question with the selected option
                                saveSolvedQuestion(index, this.dataset.option);
                            });
                        });
                    });
    
                    // Scroll to the first unsolved question
                    scrollToFirstUnsolved();
                })
                .catch(error => console.error('Error loading MCQs:', error));
        }
    
        // Load MCQs when the page loads
        loadMCQs();
    </script>
    
    
    <script src="script.js"></script>
</body>
</html>



mcqs.html


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>MCQs</title>
    <style>
        /* General Styles */
        body {
            padding-top: 110px !important;
        }
        .title h2 {
            font-size: 1.8rem;
        }
        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
            position: relative;
        }
        .content {
            padding-top: 10px !important;
        }
        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }
        /* MCQ Container Styles */
        .mcq-container {
            padding: 16px;
            margin: 0px;
            background-color: #1a1a1a;
            border-radius: 8px;
        }
        .mcq-section {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #292929;
            border-radius: 8px;
            border: 1px solid #292929;
        }
        .question {
            font-size: 1.2rem;
            font-weight: 600;
            color: #fff;
        }
        .options {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
        }
        .option {
            margin: 5px 0;
            padding: 10px;
            background-color: #444;
            border-radius: 5px;
            cursor: pointer;
            color: #fff;
            transition: background-color 0.3s;
        }
        .option:hover {
            background-color: #555;
        }
        .option.correct {
            background-color: rgb(68, 184, 84);
        }
        .option.incorrect {
            background-color: #dc3545;
        }
        .option.selected.correct {
            background-color: #34ce48;
        }
        .option.selected.incorrect {
            background-color: #e04156;
        }
        /* Dropdown Menu Styles */
        .dropdown {
            position: absolute;
            top: 0;
            right: 0;
            background-color: #333;
            border-radius: 5px;
            display: none;
            flex-direction: column;
            width: 150px;
        }
        .dropdown-button {
            background: none;
            border: none;
            cursor: pointer;
            color: #fff;
            font-size: 1.5rem;
        }
        .dropdown-item {
            padding: 10px;
            color: #fff;
            cursor: pointer;
        }
        .dropdown-item:hover {
            background-color: #555;
        }
        .confirmation-popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #fff;
            color: #000;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        .confirmation-popup button {
            margin: 0 5px;
        }
    </style>
</head>
<body>
    <!-- Header with back button and 'MCQs' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>MCQs</h2>
        </div>
        <button class="dropdown-button" onclick="toggleDropdown()">&#8230;</button>
        <div class="dropdown">
            <div class="dropdown-item" onclick="showConfirmation()">Reset Solved</div>
        </div>
    </nav>

    <!-- Confirmation Popup -->
    <div class="confirmation-popup" id="confirmationPopup">
        <p>Are you sure you want to reset all solved questions?</p>
        <button onclick="resetSolvedQuestions()">Yes</button>
        <button onclick="hideConfirmation()">No</button>
    </div>

    <!-- Main Content: MCQs List -->
    <section class="mcq-container" id="mcqContainer">
        <!-- MCQs will be populated dynamically here -->
    </section>

    <script>
        // Function to get URL parameters
        function getUrlParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }
    
        // Get URL parameters
        const board = getUrlParam('board');
        const userClass = getUrlParam('class');
        const subject = getUrlParam('subject');
        const chapter = getUrlParam('chapter');
        const type = getUrlParam('type');
        const page = getUrlParam('page'); // Get the page parameter for back navigation
    
        // Function to format URL for CSV
        function formatCsvUrl(type, board, userClass, subject, chapter) {
            return `${type}/${type.toLowerCase()}_${board}_${userClass}_${subject}_${chapter}.csv`;
        }
    
        // Function to handle back button
        function goBack() {
            window.location.href = page || `chapter.html?board=${board}&class=${userClass}&subject=${subject}&type=${type}&page=${encodeURIComponent(window.location.href)}`;
        }
    
        // Get solved questions from localStorage
        function getSolvedQuestions() {
            const key = `solved_mcqs_${board}_${userClass}_${subject}_${chapter}`;
            const solved = localStorage.getItem(key);
            return solved ? JSON.parse(solved) : {};
        }
    
        // Save solved question index to localStorage
        function saveSolvedQuestion(index, selectedOption) {
            const key = `solved_mcqs_${board}_${userClass}_${subject}_${chapter}`;
            const solvedQuestions = getSolvedQuestions();
            solvedQuestions[index] = selectedOption; // Save selected option for this question
            localStorage.setItem(key, JSON.stringify(solvedQuestions));
        }
    
        // Function to show confirmation popup
        function showConfirmation() {
            document.getElementById('confirmationPopup').style.display = 'block';
        }

        // Function to hide confirmation popup
        function hideConfirmation() {
            document.getElementById('confirmationPopup').style.display = 'none';
        }
    
        // Function to reset solved questions
        function resetSolvedQuestions() {
            localStorage.removeItem(`solved_mcqs_${board}_${userClass}_${subject}_${chapter}`);
            location.reload(); // Reload the page to reset MCQs
        }
    
        // Toggle dropdown menu
        function toggleDropdown() {
            const dropdown = document.querySelector('.dropdown');
            dropdown.style.display = dropdown.style.display === 'flex' ? 'none' : 'flex';
        }

        // Easing function for deceleration (ease-out)
        function easeOutCubic(t) {
            return 1 - Math.pow(1 - t, 6);
        }
    
        // Function to slow scroll to element with easing
        function slowScrollTo(element) {
            const targetY = element.getBoundingClientRect().top + window.pageYOffset;
            const startY = window.pageYOffset;
            const distance = targetY - startY;
            const duration = 2300; // Slow scroll duration in milliseconds
            const startTime = performance.now();
    
            function step(timestamp) {
                const elapsed = timestamp - startTime;
                const progress = Math.min(elapsed / duration, 1);
                const easedProgress = easeOutCubic(progress); // Apply easing curve
                const amountToScroll = easedProgress * distance;
                window.scrollTo(0, startY + amountToScroll);
    
                if (progress < 1) {
                    window.requestAnimationFrame(step);
                }
            }
    
            window.requestAnimationFrame(step);
        }
    
        // Scroll to first unsolved question slowly
        function scrollToFirstUnsolved() {
            const solvedQuestions = getSolvedQuestions();
            const mcqSections = document.querySelectorAll('.mcq-section');
            let firstUnsolvedElement = null;
    
            for (let i = 0; i < mcqSections.length; i++) {
                if (!solvedQuestions.hasOwnProperty(i)) {
                    firstUnsolvedElement = mcqSections[i];
                    break;
                }
            }
    
            if (firstUnsolvedElement) {
                slowScrollTo(firstUnsolvedElement);
            }
        }
    
        // Load MCQs from CSV
        function loadMCQs() {
            const csvUrl = formatCsvUrl('mcqs', board, userClass, subject, chapter);
            fetch(csvUrl)
                .then(response => response.text())
                .then(csvData => {
                    const rows = csvData.split('\n');
                    const mcqContainer = document.getElementById('mcqContainer');
                    const solvedQuestions = getSolvedQuestions();
                    
                    rows.forEach((row, index) => {
                        const [question, optionA, optionB, optionC, optionD, correctOption] = row.split(',');
    
                        if (question && optionA && optionB && optionC && optionD) {
                            const mcqSection = document.createElement('div');
                            mcqSection.className = 'mcq-section';
                            mcqSection.innerHTML = `
                                <div class="question">Q${index + 1}. ${question.trim()}</div>
                                <div class="options">
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="a">${optionA.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="b">${optionB.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="c">${optionC.trim()}</div>
                                    <div class="option" data-correct="${correctOption.trim()}" data-option="d">${optionD.trim()}</div>
                                </div>
                            `;
                            mcqContainer.appendChild(mcqSection);
    
                            // Check if this question was already solved
                            if (solvedQuestions.hasOwnProperty(index)) {
                                const selectedOption = solvedQuestions[index];
                                const selectedOptionElement = mcqSection.querySelector(`.option[data-option="${selectedOption}"]`);
                                const correctOptionElement = mcqSection.querySelector(`.option[data-option="${correctOption.trim()}"]`);
    
                                if (selectedOptionElement) {
                                    selectedOptionElement.classList.add('selected');
                                    if (selectedOption === correctOption.trim()) {
                                        selectedOptionElement.classList.add('correct');
                                    } else {
                                        selectedOptionElement.classList.add('incorrect');
                                        correctOptionElement.classList.add('correct');
                                    }
                                }
                            }
                        }
                    });
    
                    // Add event listeners for MCQ options
                    document.querySelectorAll('.mcq-section').forEach((section, index) => {
                        section.querySelectorAll('.option').forEach(option => {
                            option.addEventListener('click', function() {
                                const parent = this.parentNode;
                                const correctOption = parent.querySelector(`.option[data-option="${this.dataset.correct}"]`);
    
                                parent.querySelectorAll('.option').forEach(opt => {
                                    opt.classList.remove('selected', 'correct', 'incorrect');
                                });
    
                                this.classList.add('selected');
                                if (this.dataset.option === this.dataset.correct) {
                                    this.classList.add('correct');
                                } else {
                                    this.classList.add('incorrect');
                                    correctOption.classList.add('correct');
                                }
    
                                // Save the solved question with the selected option
                                saveSolvedQuestion(index, this.dataset.option);
                            });
                        });
                    });
    
                    // Scroll to the first unsolved question
                    scrollToFirstUnsolved();
                })
                .catch(error => console.error('Error loading MCQs:', error));
        }
    
        // Load MCQs when the page loads
        loadMCQs();
    </script>
    <script src="script.js"></script>
</body>
</html>

Books/Bihar board 10 hindi 1.pdf


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Download Bihar Board PDF</title>
<style>
    body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

.container {
    text-align: center;
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
}

h1 {
    color: #333;
}

.download-btn {
    background-color: #007BFF;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}

.download-btn:hover {
    background-color: #0056b3;
}

</style></head>
<body>
    <div class="container">
        <h1>Download Bihar Board Hindi PDF</h1>
        <p>Click the button below to download the PDF:</p>
        <button class="download-btn" onclick="downloadPDF()">Download Bihar Board 10 Hindi 1</button>
    </div>

    <script>
        function downloadPDF() {
            const link = document.createElement('a');
            link.href = 'Books/Bihar board 10 hindi 1.pdf';  // PDF का path
            link.download = 'Bihar_board_10_hindi_1.pdf';   // डाउनलोड के समय जो नाम दिखेगा
            link.click();
        }
    </script>
</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>PDF Viewer</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
        }

        .pdf-container {
            width: 100%;
            height: 90%;
            overflow-y: auto;
        }

        .title h2 {
            font-size: 1.8rem;
        }

        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
        }

        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }

        .btbox {
            justify-content: center;
            text-align: center;
            align-items: center;
            background-color: #43d156;
            padding: 20px;
            width: 160px;
        }

        .btn {
            text-decoration: none;
            font-weight: 600;
            color: white;
        }

        canvas {
            width: 100% !important;
            height: auto !important;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i href="home.html" class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Chapters</h2>
        </div>
    </nav>

    <div class="spancontainer">
        <span id="subjectTitle"></span>
    </div>

    <!-- PDF rendering container -->
    <div id="pdf-viewer" class="pdf-container"></div>

    <div class='btbox'>
        <a href="Books/Bihar board 10 hindi 1.pdf" class="btn" target="_blank">Download PDF</a>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
    <script>
        function renderPDF(url) {
            var loadingTask = pdfjsLib.getDocument(url);

            loadingTask.promise.then(function(pdf) {
                // Loop through all pages of the PDF
                for (var pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
                    pdf.getPage(pageNum).then(function(page) {
                        var scale = 1.5;
                        var viewport = page.getViewport({ scale: scale });

                        // Prepare a canvas element
                        var canvas = document.createElement('canvas');
                        var context = canvas.getContext('2d');
                        canvas.height = viewport.height;
                        canvas.width = viewport.width;

                        // Render PDF page into canvas
                        var renderContext = {
                            canvasContext: context,
                            viewport: viewport
                        };
                        page.render(renderContext);

                        // Append the canvas to the PDF viewer container
                        document.getElementById('pdf-viewer').appendChild(canvas);
                    });
                }
            }, function (reason) {
                console.error('Error: ' + reason);
            });
        }

        // Call the function to render the PDF
        renderPDF('Books/Bihar%20board%2010%20hindi%201.pdf');
    </script>
    <script src="script.js"></script>
</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>PDF Viewer</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
        }

        .pdf-container {
            width: 100%;
            height: 100%;
            overflow: hidden; /* Hide overflow for better control */
            position: relative;
            background-color: #f0f0f0; /* Optional: for better visibility */
        }

        .pdf-canvas {
            display: block;
            margin: 0 auto;
        }

        .title h2 {
            font-size: 1.8rem;
        }

        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
        }

        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }

        .btbox {
            justify-content: center;
            text-align: center;
            align-items: center;
            background-color: #43d156;
            padding: 20px;
            width: 160px;
        }

        .btn {
            text-decoration: none;
            font-weight: 600;
            color: white;
        }

        .controls {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
        }

        .zoom-btn {
            background: #fff;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 5px;
            cursor: pointer;
            margin: 2px;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i href="home.html" class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Chapters</h2>
        </div>
    </nav>

    <div class="spancontainer">
        <span id="subjectTitle"></span>
    </div>

    <!-- PDF rendering container -->
    <div id="pdf-viewer" class="pdf-container"></div>

    <!-- Zoom and Pan Controls -->
    <div class="controls">
        <button class="zoom-btn" onclick="zoomIn()">Zoom In</button>
        <button class="zoom-btn" onclick="zoomOut()">Zoom Out</button>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
    <script>
        var pdfDoc = null,
            scale = 1.5,
            minScale = 0.5,
            maxScale = 3.0,
            isDragging = false,
            startX = 0,
            startY = 0,
            scrollLeft = 0,
            scrollTop = 0,
            initialDistance = 0,
            initialScale = scale;

        function renderPDF(url) {
            var loadingTask = pdfjsLib.getDocument(url);
            loadingTask.promise.then(function(pdf) {
                pdfDoc = pdf;
                renderAllPages();
            }, function (reason) {
                console.error('Error: ' + reason);
            });
        }

        function renderAllPages() {
            document.getElementById('pdf-viewer').innerHTML = ''; // Clear previous content
            for (var num = 1; num <= pdfDoc.numPages; num++) {
                pdfDoc.getPage(num).then(function(page) {
                    var viewport = page.getViewport({ scale: scale });
                    
                    // Create a canvas element for each page
                    var canvas = document.createElement('canvas');
                    canvas.className = 'pdf-canvas';
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;
                    
                    var context = canvas.getContext('2d');
                    var renderContext = {
                        canvasContext: context,
                        viewport: viewport
                    };
                    page.render(renderContext);

                    // Append each canvas to the PDF viewer container
                    document.getElementById('pdf-viewer').appendChild(canvas);
                });
            }
        }

        function zoomIn() {
            if (scale < maxScale) {
                scale += 0.1;
                renderAllPages();
            }
        }

        function zoomOut() {
            if (scale > minScale) {
                scale -= 0.1;
                renderAllPages();
            }
        }

        // Implement panning
        var pdfViewer = document.getElementById('pdf-viewer');
        pdfViewer.addEventListener('mousedown', function(e) {
            isDragging = true;
            startX = e.pageX - pdfViewer.offsetLeft;
            startY = e.pageY - pdfViewer.offsetTop;
            scrollLeft = pdfViewer.scrollLeft;
            scrollTop = pdfViewer.scrollTop;
        });

        pdfViewer.addEventListener('mousemove', function(e) {
            if (!isDragging) return;
            e.preventDefault();
            const x = e.pageX - pdfViewer.offsetLeft;
            const y = e.pageY - pdfViewer.offsetTop;
            const walkX = (x - startX) * 3; // Scroll speed
            const walkY = (y - startY) * 3; // Scroll speed
            pdfViewer.scrollLeft = scrollLeft - walkX;
            pdfViewer.scrollTop = scrollTop - walkY;
        });

        pdfViewer.addEventListener('mouseup', function() {
            isDragging = false;
        });

        pdfViewer.addEventListener('mouseleave', function() {
            isDragging = false;
        });

        // Implement pinch-to-zoom
        function getDistance(touches) {
            var xDiff = touches[0].pageX - touches[1].pageX;
            var yDiff = touches[0].pageY - touches[1].pageY;
            return Math.sqrt(xDiff * xDiff + yDiff * yDiff);
        }

        pdfViewer.addEventListener('touchstart', function(e) {
            if (e.touches.length === 2) { // Two-finger pinch
                e.preventDefault();
                initialDistance = getDistance(e.touches);
                initialScale = scale;
            }
        });

        pdfViewer.addEventListener('touchmove', function(e) {
            if (e.touches.length === 2) { // Two-finger pinch
                e.preventDefault();
                var currentDistance = getDistance(e.touches);
                var scaleChange = currentDistance / initialDistance;
                scale = initialScale * scaleChange;

                // Keep scale within bounds
                if (scale > maxScale) scale = maxScale;
                if (scale < minScale) scale = minScale;

                renderAllPages();
            }
        });

        renderPDF('Books/Bihar%20board%2010%20hindi%201.pdf');
    </script>
    <script src="script.js"></script>
</body>
</html>


Books/Bihar%20board%2010%20hindi%201.pdf

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>PDF Viewer</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
        }

        .pdf-container {
            width: 100%;
            height: 100%;
            overflow: auto;
            position: relative;
            background-color: #6b6b6b;
            padding: 20px;
            box-sizing: border-box;
        }

        .pdf-canvas {
            display: block;
            margin: 0 auto;
            margin-bottom: 20px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
            border-radius: 4px;
        }

        .title h2 {
            font-size: 1.8rem;
            margin: 0;
            padding: 0;
        }

        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
            margin-bottom: 40px;
        }

        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }

        .btbox {
            justify-content: center;
            text-align: center;
            align-items: center;
            background-color: #43d156;
            padding: 20px;
            width: 160px;
        }

        .btn {
            text-decoration: none;
            font-weight: 600;
            color: white;
        }

        .controls {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
        }

        .reset-zoom-btn {
            background: #fff;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
            margin: 2px;
            display: none;
            transition: background-color 0.3s ease;
        }

        .reset-zoom-btn:hover {
            background-color: #eee;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i href="home.html" class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Chapters</h2>
        </div>
    </nav>

    <div class="spancontainer">
        <span id="subjectTitle"></span>
    </div>

    <!-- PDF rendering container -->
    <div id="pdf-viewer" class="pdf-container"></div>

    <!-- Reset Zoom Control -->
    <div class="controls">
        <button class="reset-zoom-btn" id="resetZoom" onclick="resetZoom()">Reset Zoom</button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
    <script>
        var pdfDoc = null,
            scale = 1.0, // Default scale to fit width
            minScale = 0.6, // Minimum zoom-out limit
            maxScale = 3.0, // Maximum zoom-in limit
            defaultScale = 1.0, // Default scale
            isDragging = false,
            startX = 0,
            startY = 0,
            scrollLeft = 0,
            scrollTop = 0,
            initialDistance = 0,
            initialScale = scale,
            zoomTimeout;

        function renderPDF(url) {
            var loadingTask = pdfjsLib.getDocument(url);
            loadingTask.promise.then(function(pdf) {
                pdfDoc = pdf;
                calculateInitialScale(); // Calculate scale to fit width
                renderAllPages();
            }, function (reason) {
                console.error('Error: ' + reason);
            });
        }

        function calculateInitialScale() {
            var containerWidth = document.getElementById('pdf-viewer').clientWidth;
            pdfDoc.getPage(1).then(function(page) {
                var viewport = page.getViewport({ scale: 1 });
                scale = containerWidth / viewport.width;
                scale = Math.max(minScale, Math.min(scale, maxScale)); // Ensure within limits
                defaultScale = scale;
                renderAllPages();
            });
        }

        function renderAllPages() {
            requestAnimationFrame(() => {
                var viewer = document.getElementById('pdf-viewer');
                viewer.innerHTML = ''; // Clear previous content

                for (var num = 1; num <= pdfDoc.numPages; num++) {
                    pdfDoc.getPage(num).then(function(page) {
                        var viewport = page.getViewport({ scale: scale });

                        var canvas = document.createElement('canvas');
                        canvas.className = 'pdf-canvas';
                        canvas.height = viewport.height * window.devicePixelRatio;
                        canvas.width = viewport.width * window.devicePixelRatio;
                        canvas.style.height = `${viewport.height}px`;
                        canvas.style.width = `${viewport.width}px`;
                        
                        var context = canvas.getContext('2d');
                        context.scale(window.devicePixelRatio, window.devicePixelRatio);

                        var renderContext = {
                            canvasContext: context,
                            viewport: viewport
                        };
                        page.render(renderContext);

                        viewer.appendChild(canvas);
                    });
                }
                updateResetZoomButton();
            });
        }

        function zoomWithFactor(zoomFactor) {
            clearTimeout(zoomTimeout);
            zoomTimeout = setTimeout(() => {
                scale *= zoomFactor;
                scale = Math.max(minScale, Math.min(scale, maxScale)); // Ensure within bounds
                renderAllPages();
            }, 100); // Debounce zoom to limit rendering frequency
        }

        function resetZoom() {
            scale = defaultScale;
            renderAllPages();
        }

        function updateResetZoomButton() {
            var resetZoomBtn = document.getElementById('resetZoom');
            resetZoomBtn.style.display = (scale !== defaultScale) ? 'block' : 'none';
        }

        // Implement panning
        var pdfViewer = document.getElementById('pdf-viewer');
        pdfViewer.addEventListener('mousedown', function(e) {
            isDragging = true;
            startX = e.pageX - pdfViewer.offsetLeft;
            startY = e.pageY - pdfViewer.offsetTop;
            scrollLeft = pdfViewer.scrollLeft;
            scrollTop = pdfViewer.scrollTop;
        });

        pdfViewer.addEventListener('mousemove', function(e) {
            if (!isDragging) return;
            e.preventDefault();
            const x = e.pageX - pdfViewer.offsetLeft;
            const y = e.pageY - pdfViewer.offsetTop;
            const walkX = (x - startX) * 3; // Scroll speed
            const walkY = (y - startY) * 3; // Scroll speed
            pdfViewer.scrollLeft = scrollLeft - walkX;
            pdfViewer.scrollTop = scrollTop - walkY;
        });

        pdfViewer.addEventListener('mouseup', function() {
            isDragging = false;
        });

        pdfViewer.addEventListener('mouseleave', function() {
            isDragging = false;
        });

        // Smooth pinch-to-zoom
        function getDistance(touches) {
            var xDiff = touches[0].pageX - touches[1].pageX;
            var yDiff = touches[0].pageY - touches[1].pageY;
            return Math.sqrt(xDiff * xDiff + yDiff * yDiff);
        }

        pdfViewer.addEventListener('wheel', function(e) {
            e.preventDefault();
            var zoomFactor = e.deltaY < 0 ? 1.05 : 0.95; // Zoom in or out based on scroll direction
            zoomWithFactor(zoomFactor);
        });

        pdfViewer.addEventListener('touchstart', function(e) {
            if (e.touches.length === 2) {
                e.preventDefault();
                initialDistance = getDistance(e.touches);
                initialScale = scale;
            }
        });

        pdfViewer.addEventListener('touchmove', function(e) {
            if (e.touches.length === 2) {
                e.preventDefault();
                var currentDistance = getDistance(e.touches);
                var scaleChange = currentDistance / initialDistance;
                scale = initialScale * scaleChange;

                scale = Math.max(minScale, Math.min(scale, maxScale)); // Ensure within bounds
                renderAllPages();
            }
        });

        renderPDF('Books/Bihar%20board%2010%20hindi%201.pdf');
    </script>
    <script src="script.js"></script>
</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Download Bihar Board 10 Hindi Book</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: #f4f4f4;
    }
    .download-btn {
      padding: 15px 30px;
      font-size: 18px;
      color: white;
      background-color: #28a745;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      text-decoration: none;
    }
    .download-btn:hover {
      background-color: #218838;
    }
    h1 {
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <h1>Bihar Board 10 Hindi - Book 1</h1>
  <a href="Books/Bihar%20board%2010%20hindi%201.pdf" class="download-btn" download>Download Book</a>
</body>
</html>


booksLink

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Books</title>
    <style>
        /* General Styles */
        body {
            padding-top: 110px !important;
        }

        .title h2 {
            font-size: 1.8rem;
        }

        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
        }

        .content {
            padding-top: 10px !important;
        }

        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }

        /* Book Container Styles */
        .book-container {
            padding: 16px;
            margin: 0px;
            background-color: #1a1a1a;
            border-radius: 8px;
        }

        .book-section {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #292929;
            border-radius: 8px;
            border: 1px solid #292929;
        }

        .book-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #fff;
            margin-bottom: 40px;
        }

        .download-button {
            margin-top: 15px;
            padding: 10px;
            background-color: #444;
            border-radius: 5px;
            cursor: pointer;
            color: #fff;
            transition: background-color 0.3s;
            text-align: center;
        }

        .download-button:hover {
            background-color: #555;
        }

        /* Ripple Effect Styles */
        .ripple {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.6);
            pointer-events: none;
        }

        @keyframes ripple-animation {
            to {
                transform: scale(4);
                opacity: 0;
            }
        }
    </style>
</head>

<body>
    <!-- Header with back button and 'Books' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Books</h2>
        </div>
    </nav>

    <!-- Main Content: Books List -->
    <section class="book-container" id="bookContainer">
        <!-- Books will be populated dynamically here -->
    </section>

    <script>
        // Function to get URL parameters
        function getUrlParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }

        // Get URL parameters
        const board = getUrlParam('board');
        const userClass = getUrlParam('class');
        const subject = getUrlParam('subject');
        const chapter = getUrlParam('chapter');
        const type = getUrlParam('type');
        const page = getUrlParam('page'); // Get the page parameter for back navigation

        // Function to format URL for PDF
        function formatPdfUrl(board, userClass, subject, chapter) {
            return `Books%20pdf/${board}_${userClass}_${subject}_${chapter}.pdf`;
        }

        // Function to handle back button
        function goBack() {
            window.location.href = page || `chapter.html?board=${board}&class=${userClass}&subject=${subject}&type=${type}&page=${encodeURIComponent(window.location.href)}`;
        }

        // Function to load books
        function loadBooks() {
            const pdfUrl = formatPdfUrl(board, userClass, subject, chapter);
            fetch(pdfUrl)
                .then(response => response.blob())
                .then(pdfBlob => {
                    const pdfUrl = URL.createObjectURL(pdfBlob);
                    const bookContainer = document.getElementById('bookContainer');
                    
                    // Create a book section with download button
                    const bookSection = document.createElement('div');
                    bookSection.className = 'book-section';
                    bookSection.innerHTML = `
                        <div class="book-title">${board} ${userClass} ${subject} ${chapter}</div>
                        <a href="${pdfUrl}" download class="download-button ripple-target">Download PDF</a>
                    `;
                    bookContainer.appendChild(bookSection);
                })
                .catch(error => console.error('Error loading PDF:', error));
        }

        // Load books when the page loads
        loadBooks();
    </script>
    <!-- Ripple effect script -->
    <script>
        document.querySelectorAll('.ripple-target').forEach(button => {
            button.addEventListener('click', function (e) {
                const ripple = document.createElement('span');
                const diameter = Math.max(this.clientWidth, this.clientHeight);
                const radius = diameter / 2;

                ripple.style.width = ripple.style.height = `${diameter}px`;
                ripple.style.left = `${e.clientX - this.getBoundingClientRect().left - radius}px`;
                ripple.style.top = `${e.clientY - this.getBoundingClientRect().top - radius}px`;
                ripple.classList.add('ripple');

                // Remove previous ripple effect if exists
                const existingRipple = this.querySelector('.ripple');
                if (existingRipple) {
                    existingRipple.remove();
                }

                // Add new ripple
                this.appendChild(ripple);

                // Apply animation
                ripple.style.animation = 'ripple-animation 600ms linear';
            });
        });
    </script>
    <script src="script.js"></script>
</body>

</html>




books.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Books</title>
    <style>
        /* General Styles */
        body {
            padding-top: 110px !important;
        }

        .title h2 {
            font-size: 1.8rem;
        }

        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
        }

        .content {
            padding-top: 10px !important;
        }

        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }

        /* Book Container Styles */
        .book-container {
            padding: 16px;
            margin: 0px;
            background-color: #1a1a1a;
            border-radius: 8px;
        }

        .book-section {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #292929;
            border-radius: 8px;
            border: 1px solid #292929;
        }

        .book-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #fff;
            margin-bottom: 40px;
        }

        .download-button {
            margin-top: 15px;
            padding: 10px;
            background-color: #444;
            border-radius: 5px;
            cursor: pointer;
            color: #fff;
            transition: background-color 0.3s;
            text-align: center;
            position: relative;
            overflow: hidden;
            border-style: none;
        }

        .download-button:hover {
            background-color: #555;
        }

        /* Ripple Effect Styles */
        .ripple {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.6);
            pointer-events: none;
            transform: scale(0);
            animation: ripple-animation 600ms linear;
        }

        @keyframes ripple-animation {
            to {
                transform: scale(4);
                opacity: 0;
            }
        }
    </style>
</head>

<body>
    <!-- Header with back button and 'Books' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Books</h2>
        </div>
    </nav>

    <!-- Main Content: Books List -->
    <section class="book-container" id="bookContainer">
        <!-- Books will be populated dynamically here -->
    </section>

    <script>
        // Function to get URL parameters
        function getUrlParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }

        // Get URL parameters
        const board = getUrlParam('board');
        const userClass = getUrlParam('class');
        const subject = getUrlParam('subject');
        const chapter = getUrlParam('chapter');
        const type = getUrlParam('type');
        const page = getUrlParam('page'); // Get the page parameter for back navigation

        // Function to format URL for PDF
        function formatPdfUrl(board, userClass, subject, chapter) {
            return `Books%20pdf/${board}_${userClass}_${subject}_${chapter}.pdf`;
        }

        // Function to handle back button
        function goBack() {
            window.location.href = page || `chapter.html?board=${board}&class=${userClass}&subject=${subject}&type=${type}&page=${encodeURIComponent(window.location.href)}`;
        }

        // Function to load books
        function loadBooks() {
            const pdfUrl = formatPdfUrl(board, userClass, subject, chapter);
            const bookContainer = document.getElementById('bookContainer');
            
            // Create a book section with download button
            const bookSection = document.createElement('div');
            bookSection.className = 'book-section';
            bookSection.innerHTML = `
                <div class="book-title">${board} ${userClass} ${subject} ${chapter}</div>
                <button class="download-button ripple-target" onclick="downloadPdf('${pdfUrl}')">Download PDF</button>
            `;
            bookContainer.appendChild(bookSection);
        }

        // Function to force PDF download
        function downloadPdf(pdfUrl) {
            const link = document.createElement('a');
            link.href = pdfUrl;
            link.setAttribute('download', ''); // Forces download without specifying a file name
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Load books when the page loads
        loadBooks();
    </script>

    <!-- Ripple effect script -->
    <script>
        document.addEventListener('click', function (e) {
            const target = e.target.closest('.ripple-target');
            if (!target) return;

            const ripple = document.createElement('span');
            const diameter = Math.max(target.clientWidth, target.clientHeight);
            const radius = diameter / 2;

            ripple.style.width = ripple.style.height = `${diameter}px`;
            ripple.style.left = `${e.clientX - target.getBoundingClientRect().left - radius}px`;
            ripple.style.top = `${e.clientY - target.getBoundingClientRect().top - radius}px`;
            ripple.classList.add('ripple');

            // Remove existing ripple if any
            const existingRipple = target.querySelector('.ripple');
            if (existingRipple) {
                existingRipple.remove();
            }

            target.appendChild(ripple);
        });
    </script>

    <script src="script.js"></script>
</body>

</html>



solutionsLink
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Load Formatted Text</title>
    <link rel="stylesheet" href="styles.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.46; /* Controls the space between lines */
            margin: 0;
            /* padding: 20px; */
            font-size: 1.3rem;
        }
        
        #content {
            white-space: pre-line; /* This keeps line breaks as they are in the text */
            margin: 20px;
        }

        /* Optional: You can add more control over vertical spacing */
        b {
            line-height: 1; /* Slightly reduce line height for bold text */
        }

        p {
            margin: 0; /* Remove default margins for paragraphs */
            padding: 0;
        }

        br {
            line-height: .4; /* Ensures <br> doesn't add too much vertical space */
        }
        .icon-wrapper {
            position: relative !important;
            width: 47px;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Solutions</h2>
        </div>
    </nav>
    <div id="content"></div>

    <script>
        fetch('content.txt')
            .then(response => response.text())
            .then(data => {
                document.getElementById('content').innerHTML = data;
            })
            .catch(error => console.error('Error loading content:', error));
    </script>
</body>
</html>


quizzes.html

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz</title>
    <link rel="stylesheet" href="styles.css">
    <style>
        /* General Styles */
        body {
            padding-top: 110px !important;
            background-color: #121212;
            color: #ffffff;
            font-family: Arial, sans-serif;
        }

        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
            background-color: #1a1a1a;
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .title h2 {
            font-size: 1.8rem;
            color: #fff;
        }

        .quiz-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .question-number {
            font-size: 1.2rem;
            margin-bottom: 10px;
        }

        .question {
            font-size: 1.5rem;
            margin-bottom: 20px;
        }

        .options {
            display: flex;
            flex-direction: column;
        }

        .option {
            background-color: #444;
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .option:hover {
            background-color: #555;
        }

        .option.selected {
            background-color: #2f78ff;
        }

        .navigation-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .nav-button {
            padding: 10px 20px;
            background-color: #444;
            border: none;
            border-radius: 5px;
            color: #fff;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 1rem;
        }

        .nav-button:hover {
            background-color: #555;
        }

        .nav-button:disabled {
            background-color: #777;
            cursor: not-allowed;
        }

        /* Confirmation Popup */
        .confirmation-popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #353535;
            color: #ffffff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            max-width: 70%;
            width: 400px;
            z-index: 2000;
        }

        .confirmation-popup p {
            text-align: center;
        }

        .popup-button-div {
            text-align: center;
            display: flex;
            justify-content: center;
        }

        .confirmation-popup button {
            border-style: none;
            background: #43d156;
            padding-inline: 16px;
            padding-block: 6px;
            color: white;
            border-radius: 4px;
            margin-inline: 4px;
            margin-block: 2px;
            font-size: 0.826rem;
            cursor: pointer;
        }

        /* Ripple effect css */
        .ripple-target {
            position: relative;
            overflow: hidden;
        }

        .ripple-target .ripple {
            position: absolute;
            border-radius: 50%;
            background: rgba(190, 189, 189, 0.404);
            transform: scale(0);
            pointer-events: none;
            z-index: 1;
        }

        @keyframes ripple-animation {
            to {
                transform: scale(4);
                opacity: 0;
            }
        }
    </style>
</head>

<body>
    <!-- Header with back button and 'Quiz' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Quiz</h2>
        </div>
    </nav>

    <!-- Confirmation Popup for Resetting Quiz -->
    <div class="confirmation-popup" id="confirmationPopup">
        <p>Are you sure you want to reset the quiz?</p>
        <div class="popup-button-div">
            <button onclick="resetQuiz()" class="ripple-target">Yes</button>
            <button onclick="hideConfirmation()" class="ripple-target">No</button>
        </div>
    </div>

    <!-- Main Content: Quiz Display -->
    <section class="quiz-container" id="quizContainer">
        <!-- Quiz content will be dynamically populated here -->
    </section>

    <!-- Navigation Buttons -->
    <div class="quiz-container">
        <div class="navigation-buttons">
            <button class="nav-button" id="prevButton" onclick="prevQuestion()">Previous</button>
            <button class="nav-button" id="nextButton" onclick="nextQuestion()">Next</button>
        </div>
    </div>

    <script>
        // Function to get URL parameters
        function getUrlParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }

        // Get URL parameters
        const board = getUrlParam('board');
        const userClass = getUrlParam('class');
        const subject = getUrlParam('subject');
        const chapter = getUrlParam('chapter');
        const test = getUrlParam('test');
        const page = getUrlParam('page'); // For back navigation

        // Function to handle back button
        function goBack() {
            window.location.href = page || `quiz.html?board=${board}&class=${userClass}&subject=${subject}&chapter=${chapter}`;
        }

        // Function to format URL for CSV
        function formatCsvUrl(type, board, userClass, subject, chapter, test) {
            return `Contents/Quizzes/${type.toLowerCase()}_${board}_${userClass}_${subject}_${chapter}_${test}.csv`;
        }

        // Variables to store quiz data and user responses
        let quizData = [];
        let currentQuestionIndex = 0;
        let userResponses = {};

        // Load quiz data from CSV
        function loadQuiz() {
            const csvUrl = formatCsvUrl('quiz', board, userClass, subject, chapter, test);
            fetch(csvUrl)
                .then(response => response.text())
                .then(csvData => {
                    parseCSV(csvData);
                    displayQuestion();
                    updateNavigationButtons();
                })
                .catch(error => console.error('Error loading quiz:', error));
        }

        // Parse CSV data into quizData array
        function parseCSV(csvData) {
            const rows = csvData.trim().split('\n');
            rows.forEach((row, index) => {
                const [question, optionA, optionB, optionC, optionD, correctOption] = row.split(',');

                if (question && optionA && optionB && optionC && optionD && correctOption) {
                    quizData.push({
                        question: question.trim(),
                        options: {
                            a: optionA.trim(),
                            b: optionB.trim(),
                            c: optionC.trim(),
                            d: optionD.trim()
                        },
                        correctOption: correctOption.trim().toLowerCase()
                    });
                }
            });

            // Load user responses from localStorage if available
            const savedResponses = getUserResponses();
            if (savedResponses) {
                userResponses = savedResponses;
            }
        }

        // Function to get user responses from localStorage
        function getUserResponses() {
            const key = `quiz_responses_${board}_${userClass}_${subject}_${chapter}_${test}`;
            const responses = localStorage.getItem(key);
            return responses ? JSON.parse(responses) : {};
        }

        // Function to save user responses to localStorage
        function saveUserResponses() {
            const key = `quiz_responses_${board}_${userClass}_${subject}_${chapter}_${test}`;
            localStorage.setItem(key, JSON.stringify(userResponses));
        }

        // Display the current question
        function displayQuestion() {
            const quizContainer = document.getElementById('quizContainer');
            const currentQuiz = quizData[currentQuestionIndex];

            if (!currentQuiz) return;

            quizContainer.innerHTML = `
                <div class="question-number">Question ${currentQuestionIndex + 1} of ${quizData.length}</div>
                <div class="question">${currentQuiz.question}</div>
                <div class="options">
                    <div class="option ripple-target" data-option="a">${currentQuiz.options.a}</div>
                    <div class="option ripple-target" data-option="b">${currentQuiz.options.b}</div>
                    <div class="option ripple-target" data-option="c">${currentQuiz.options.c}</div>
                    <div class="option ripple-target" data-option="d">${currentQuiz.options.d}</div>
                </div>
            `;

            // Highlight previously selected option if exists
            const selectedOption = userResponses[currentQuestionIndex];
            if (selectedOption) {
                const optionElement = quizContainer.querySelector(`.option[data-option="${selectedOption}"]`);
                if (optionElement) {
                    optionElement.classList.add('selected');
                }
            }

            // Add event listeners to options
            document.querySelectorAll('.option').forEach(option => {
                option.addEventListener('click', function () {
                    // Remove 'selected' class from all options
                    document.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));
                    // Add 'selected' class to clicked option
                    this.classList.add('selected');
                    // Save user response
                    userResponses[currentQuestionIndex] = this.dataset.option;
                    saveUserResponses();
                });
            });

            // Add ripple effect to options
            addRippleEffect();
        }

        // Update navigation buttons (Previous and Next/Finish)
        function updateNavigationButtons() {
            const prevButton = document.getElementById('prevButton');
            const nextButton = document.getElementById('nextButton');

            // Disable Previous button on first question
            prevButton.disabled = currentQuestionIndex === 0;

            // Change Next button to Finish on last question
            if (currentQuestionIndex === quizData.length - 1) {
                nextButton.textContent = 'Finish';
            } else {
                nextButton.textContent = 'Next';
            }
        }

        // Navigate to the previous question
        function prevQuestion() {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                displayQuestion();
                updateNavigationButtons();
            }
        }

        // Navigate to the next question or finish the quiz
        function nextQuestion() {
            if (currentQuestionIndex < quizData.length - 1) {
                currentQuestionIndex++;
                displayQuestion();
                updateNavigationButtons();
            } else {
                // Finish the quiz
                finishQuiz();
            }
        }

        // Finish the quiz and navigate to results page
        function finishQuiz() {
            // Optionally, you can validate if all questions are answered
            // For simplicity, we'll proceed to results

            // Save user responses
            saveUserResponses();

            // Navigate to results.html with necessary parameters
            window.location.href = `results.html?board=${board}&class=${userClass}&subject=${subject}&chapter=${chapter}&test=${test}`;
        }

        // Function to show confirmation popup for resetting quiz
        function showConfirmation() {
            document.getElementById('confirmationPopup').style.display = 'block';
        }

        // Function to hide confirmation popup
        function hideConfirmation() {
            document.getElementById('confirmationPopup').style.display = 'none';
        }

        // Function to reset the quiz
        function resetQuiz() {
            const key = `quiz_responses_${board}_${userClass}_${subject}_${chapter}_${test}`;
            localStorage.removeItem(key);
            userResponses = {};
            currentQuestionIndex = 0;
            hideConfirmation();
            displayQuestion();
            updateNavigationButtons();
        }

        // Add ripple effect to buttons and options
        function addRippleEffect() {
            document.querySelectorAll('.ripple-target').forEach(element => {
                element.addEventListener('click', function (e) {
                    const ripple = document.createElement('span');
                    const diameter = Math.max(this.clientWidth, this.clientHeight);
                    const radius = diameter / 2;

                    ripple.style.width = ripple.style.height = `${diameter}px`;
                    ripple.style.left = `${e.clientX - this.getBoundingClientRect().left - radius}px`;
                    ripple.style.top = `${e.clientY - this.getBoundingClientRect().top - radius}px`;
                    ripple.classList.add('ripple');

                    // Remove previous ripple if exists
                    const existingRipple = this.querySelector('.ripple');
                    if (existingRipple) {
                        existingRipple.remove();
                    }

                    this.appendChild(ripple);

                    // Apply animation
                    ripple.style.animation = 'ripple-animation 600ms linear';
                });
            });
        }

        // Initialize quiz on page load
        window.onload = function () {
            loadQuiz();
            addRippleEffect();
        };
    </script>

    <!-- Ripple effect script for navigation buttons and other ripple targets -->
    <script>
        document.querySelectorAll('.ripple-target').forEach(element => {
            element.addEventListener('click', function (e) {
                const ripple = document.createElement('span');
                const diameter = Math.max(this.clientWidth, this.clientHeight);
                const radius = diameter / 2;

                ripple.style.width = ripple.style.height = `${diameter}px`;
                ripple.style.left = `${e.clientX - this.getBoundingClientRect().left - radius}px`;
                ripple.style.top = `${e.clientY - this.getBoundingClientRect().top - radius}px`;
                ripple.classList.add('ripple');

                // Remove previous ripple if exists
                const existingRipple = this.querySelector('.ripple');
                if (existingRipple) {
                    existingRipple.remove();
                }

                this.appendChild(ripple);

                // Apply animation
                ripple.style.animation = 'ripple-animation 600ms linear';
            });
        });
    </script>
</body>

</html>
results.html

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz Results</title>
    <link rel="stylesheet" href="styles.css">
    <style>
        /* General Styles */
        body {
            padding-top: 110px !important;
            background-color: #121212;
            color: #ffffff;
            font-family: Arial, sans-serif;
        }

        .navbar {
            padding-left: 10px !important;
            padding-block: 22px !important;
            background-color: #1a1a1a;
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .title h2 {
            font-size: 1.8rem;
            color: #fff;
        }

        .results-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .question-box {
            background-color: #222;
            border-radius: 5px;
            padding: 15px;
            margin: 10px 0;
        }

        .question {
            font-size: 1.5rem;
            margin-bottom: 10px;
        }

        .options {
            display: flex;
            flex-direction: column;
        }

        .option {
            background-color: #444;
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
        }

        .correct {
            background-color: #43d156; /* Green for correct answer */
        }

        .selected {
            background-color: #ff3838; /* Red for selected wrong answer */
        }

        .unsolved {
            background-color: #f3c94c; /* Yellow for unsolved */
        }

        .score {
            font-size: 1.2rem;
            margin-top: 20px;
        }

        .star-icon {
            color: gold;
            margin-left: 5px;
        }

        .navigation-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .nav-button {
            padding: 10px 20px;
            background-color: #444;
            border: none;
            border-radius: 5px;
            color: #fff;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 1rem;
        }

        .nav-button:hover {
            background-color: #555;
        }
    </style>
</head>

<body>
    <!-- Header with back button and 'Results' title -->
    <nav class="navbar">
        <div class="back-button icon-wrapper" onclick="goBack();">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <div class="title">
            <h2>Results</h2>
        </div>
    </nav>

    <!-- Results Display Section -->
    <section class="results-container" id="resultsContainer">
        <!-- Results will be dynamically populated here -->
    </section>

    <div class="navigation-buttons">
        <button class="nav-button" onclick="goBack()">Go Back to Quiz</button>
        <button class="nav-button" onclick="resetQuiz()">Reset Quiz</button>
    </div>

    <script>
        // Function to get URL parameters
        function getUrlParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }

        // Get URL parameters
        const board = getUrlParam('board');
        const userClass = getUrlParam('class');
        const subject = getUrlParam('subject');
        const chapter = getUrlParam('chapter');
        const test = getUrlParam('test');

        // Function to handle back button
        function goBack() {
            window.location.href = `quiz.html?board=${board}&class=${userClass}&subject=${subject}&chapter=${chapter}&test=${test}`;
        }

        // Function to reset the quiz
        function resetQuiz() {
            const key = `quiz_responses_${board}_${userClass}_${subject}_${chapter}_${test}`;
            localStorage.removeItem(key);
            window.location.href = `quiz.html?board=${board}&class=${userClass}&subject=${subject}&chapter=${chapter}&test=${test}`;
        }

        // Variables to store quiz data and user responses
        let quizData = [];
        let userResponses = {};

        // Load quiz data and results
        function loadResults() {
            const csvUrl = formatCsvUrl('quiz', board, userClass, subject, chapter, test);
            fetch(csvUrl)
                .then(response => response.text())
                .then(csvData => {
                    parseCSV(csvData);
                    displayResults();
                })
                .catch(error => console.error('Error loading quiz:', error));
        }

        // Parse CSV data into quizData array
        function parseCSV(csvData) {
            const rows = csvData.trim().split('\n');
            rows.forEach((row, index) => {
                const [question, optionA, optionB, optionC, optionD, correctOption] = row.split(',');

                if (question && optionA && optionB && optionC && optionD && correctOption) {
                    quizData.push({
                        question: question.trim(),
                        options: {
                            a: optionA.trim(),
                            b: optionB.trim(),
                            c: optionC.trim(),
                            d: optionD.trim()
                        },
                        correctOption: correctOption.trim().toLowerCase()
                    });
                }
            });

            // Load user responses from localStorage
            const key = `quiz_responses_${board}_${userClass}_${subject}_${chapter}_${test}`;
            const responses = localStorage.getItem(key);
            userResponses = responses ? JSON.parse(responses) : {};
        }

        // Format URL for CSV
        function formatCsvUrl(type, board, userClass, subject, chapter, test) {
            return `Contents/Quizzes/${type.toLowerCase()}_${board}_${userClass}_${subject}_${chapter}_${test}.csv`;
        }

        // Display the results
        function displayResults() {
            const resultsContainer = document.getElementById('resultsContainer');
            let correctCount = 0;
            const totalQuestions = quizData.length;

            quizData.forEach((quiz, index) => {
                const userAnswer = userResponses[index];

                // Create result box for each question
                let optionsHTML = '';
                for (const [key, value] of Object.entries(quiz.options)) {
                    let optionClass = '';

                    // Highlight correct answer and selected wrong option
                    if (userAnswer === quiz.correctOption) {
                        if (key === quiz.correctOption) {
                            optionClass = 'correct'; // Green for correct answer
                        }
                    } else {
                        if (key === userAnswer) {
                            optionClass = 'selected'; // Red for selected wrong answer
                        } else if (key === quiz.correctOption) {
                            optionClass = 'correct'; // Green for correct answer
                        }
                    }

                    optionsHTML += `<div class="option ${optionClass}">${value}</div>`;
                }

                const questionHTML = `
                    <div class="question-box">
                        <div class="question">Question ${index + 1}: ${quiz.question}</div>
                        <div class="options">
                            ${optionsHTML}
                        </div>
                    </div>
                `;
                
                resultsContainer.innerHTML += questionHTML;

                // Update correct count
                if (userAnswer === quiz.correctOption) {
                    correctCount++;
                }
            });

            // Calculate scores
            const scoreRightTotal = `${correctCount}/${totalQuestions}`;
            const percentageRight = ((correctCount / totalQuestions) * 100).toFixed(2);
            const totalRightPercentage = (correctCount * (percentageRight / 100)).toFixed(2);

            // Display scores
            resultsContainer.innerHTML += `
                <div class="score">Score (Right/Total): ${scoreRightTotal}</div>
                <div class="score">Percentage Right: ${percentageRight}%</div>
                <div class="score">Total Score: ${totalRightPercentage} <span class="star-icon">⭐</span></div>
            `;
        }

        // Initialize results on page load
        window.onload = function () {
            loadResults();
        };
    </script>
</body>

</html>
